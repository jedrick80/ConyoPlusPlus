/* The following code was generated by JFlex 1.6.0 */

/*Import*/
import java.io.*;
import java_cup.runtime.*;

/**
 * Conyo++ Language Lexer
 * CHUA, Jedrick
 * LIVELO, Evan Dennison
 * YAO, John Paul
 */

class ConyoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\5\1\3\1\104\1\104\1\4\22\0\1\5\1\0\1\103"+
    "\1\0\1\61\1\74\1\100\1\102\1\62\1\63\1\72\1\70\1\57"+
    "\1\71\1\10\1\73\1\7\11\2\1\60\1\0\1\75\1\77\1\76"+
    "\2\0\1\40\1\31\1\1\1\53\2\1\1\22\1\54\2\1\1\47"+
    "\1\15\1\21\1\43\1\20\1\50\1\1\1\51\1\46\1\33\1\45"+
    "\1\1\1\52\1\1\1\26\1\1\1\64\1\6\1\65\1\0\1\1"+
    "\1\0\1\13\1\27\1\56\1\30\1\11\1\55\1\16\1\23\1\24"+
    "\1\1\1\14\1\32\1\12\1\42\1\35\1\34\1\1\1\25\1\36"+
    "\1\41\1\37\1\1\1\44\1\1\1\17\1\1\1\66\1\101\1\67"+
    "\7\0\1\104\u1fa2\0\1\104\1\104\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\2\5\1\4"+
    "\1\6\20\3\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\2\1\27\1\30\1\31\1\32\1\1"+
    "\1\33\1\2\1\5\2\0\12\3\1\34\12\3\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\2\3\1\43\1\44"+
    "\1\45\20\3\1\0\1\3\1\46\1\3\1\47\5\3"+
    "\1\50\3\3\1\51\3\3\1\52\2\42\13\3\1\53"+
    "\2\3\1\54\5\3\1\55\1\3\1\56\4\3\1\57"+
    "\17\3\1\60\16\3\1\61\4\3\1\62\2\3\1\63"+
    "\1\3\1\64\2\3\1\65\1\66\3\3\1\67\1\3"+
    "\1\70\1\71\4\3\1\72\1\73\1\74\1\75\2\3"+
    "\1\76\1\77\1\100\1\3\1\101\1\3\1\102\1\103"+
    "\1\104\1\105\4\3\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\317\0\u019e"+
    "\0\u01e3\0\317\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\u0678\0\u06bd\0\u0702\0\317\0\317\0\317\0\317\0\u0747"+
    "\0\317\0\u078c\0\u078c\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0"+
    "\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0114"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\317\0\317\0\317\0\317\0\317\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0114\0\u0114\0\u0114\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u0114\0\u1368\0\u0114\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1"+
    "\0\u0114\0\u1506\0\u154b\0\u1590\0\u0114\0\u15d5\0\u161a\0\u165f"+
    "\0\u0114\0\u16a4\0\317\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd"+
    "\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u0114\0\u19e0"+
    "\0\u1a25\0\u0114\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u0114"+
    "\0\u1bc3\0\u0114\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u0114\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u0114\0\u2127"+
    "\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f"+
    "\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u0114\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u0114\0\u2601\0\u2646\0\u0114\0\u268b\0\u0114"+
    "\0\u26d0\0\u2715\0\u0114\0\u0114\0\u275a\0\u279f\0\u27e4\0\u0114"+
    "\0\u2829\0\u0114\0\u0114\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u0114"+
    "\0\u0114\0\u0114\0\u0114\0\u2982\0\u29c7\0\u0114\0\u0114\0\u0114"+
    "\0\u2a0c\0\u0114\0\u2a51\0\u0114\0\u0114\0\u0114\0\u2a96\0\u2adb"+
    "\0\u2b20\0\u2b65\0\u2baa\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\4\1\11"+
    "\1\12\1\5\1\13\4\5\1\14\1\15\1\16\1\5"+
    "\1\17\1\20\2\5\1\21\1\22\1\5\1\23\1\5"+
    "\1\24\1\5\1\25\2\5\1\26\1\27\1\5\1\30"+
    "\10\5\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\0\3\60\1\7\1\10\1\60\1\4\74\60\1\61"+
    "\1\60\3\62\1\7\1\10\1\63\1\4\74\62\1\4"+
    "\1\64\106\0\2\5\4\0\1\5\1\0\46\5\30\0"+
    "\1\6\4\0\1\6\1\65\77\0\1\7\111\0\1\65"+
    "\75\0\2\5\4\0\1\5\1\0\2\5\1\66\43\5"+
    "\27\0\2\5\4\0\1\5\1\0\26\5\1\67\17\5"+
    "\27\0\2\5\4\0\1\5\1\0\10\5\1\70\35\5"+
    "\27\0\2\5\4\0\1\5\1\0\40\5\1\71\1\5"+
    "\1\72\3\5\27\0\2\5\4\0\1\5\1\0\13\5"+
    "\1\73\32\5\27\0\2\5\4\0\1\5\1\0\31\5"+
    "\1\74\14\5\27\0\2\5\4\0\1\5\1\0\2\5"+
    "\1\75\11\5\1\76\7\5\1\77\21\5\27\0\2\5"+
    "\4\0\1\5\1\0\16\5\1\100\27\5\27\0\2\5"+
    "\4\0\1\5\1\0\13\5\1\101\32\5\27\0\2\5"+
    "\4\0\1\5\1\0\24\5\1\102\21\5\27\0\2\5"+
    "\4\0\1\5\1\0\26\5\1\103\1\5\1\104\15\5"+
    "\27\0\2\5\4\0\1\5\1\0\12\5\1\105\33\5"+
    "\27\0\2\5\4\0\1\5\1\0\26\5\1\106\17\5"+
    "\27\0\2\5\4\0\1\5\1\0\2\5\1\107\43\5"+
    "\27\0\2\5\4\0\1\5\1\0\21\5\1\110\24\5"+
    "\27\0\2\5\4\0\1\5\1\0\12\5\1\111\16\5"+
    "\1\112\14\5\124\0\1\113\1\114\104\0\1\115\104\0"+
    "\1\116\5\0\3\60\2\0\1\60\1\0\74\60\1\0"+
    "\1\60\102\0\1\117\4\0\1\120\4\0\1\121\76\0"+
    "\2\5\4\0\1\5\1\0\3\5\1\122\42\5\27\0"+
    "\2\5\4\0\1\5\1\0\12\5\1\123\33\5\27\0"+
    "\2\5\4\0\1\5\1\0\11\5\1\124\34\5\27\0"+
    "\2\5\4\0\1\5\1\0\41\5\1\125\4\5\27\0"+
    "\2\5\4\0\1\5\1\0\40\5\1\126\5\5\27\0"+
    "\2\5\4\0\1\5\1\0\14\5\1\127\31\5\27\0"+
    "\2\5\4\0\1\5\1\0\30\5\1\130\15\5\27\0"+
    "\2\5\4\0\1\5\1\0\6\5\1\131\37\5\27\0"+
    "\2\5\4\0\1\5\1\0\1\132\1\5\1\133\43\5"+
    "\27\0\2\5\4\0\1\5\1\0\24\5\1\134\21\5"+
    "\27\0\2\5\4\0\1\5\1\0\3\5\1\135\42\5"+
    "\27\0\2\5\4\0\1\5\1\0\24\5\1\136\21\5"+
    "\27\0\2\5\4\0\1\5\1\0\23\5\1\137\22\5"+
    "\27\0\2\5\4\0\1\5\1\0\14\5\1\140\31\5"+
    "\27\0\2\5\4\0\1\5\1\0\13\5\1\141\32\5"+
    "\27\0\2\5\4\0\1\5\1\0\12\5\1\142\33\5"+
    "\27\0\2\5\4\0\1\5\1\0\21\5\1\143\24\5"+
    "\27\0\2\5\4\0\1\5\1\0\24\5\1\144\21\5"+
    "\27\0\2\5\4\0\1\5\1\0\2\5\1\145\43\5"+
    "\27\0\2\5\4\0\1\5\1\0\6\5\1\146\37\5"+
    "\30\0\1\120\4\0\1\120\1\0\1\147\104\0\1\147"+
    "\74\0\2\5\4\0\1\5\1\0\1\150\45\5\27\0"+
    "\2\5\4\0\1\5\1\0\12\5\1\151\33\5\27\0"+
    "\2\5\4\0\1\5\1\0\1\152\45\5\27\0\2\5"+
    "\4\0\1\5\1\0\6\5\1\153\37\5\27\0\2\5"+
    "\4\0\1\5\1\0\2\5\1\154\43\5\27\0\2\5"+
    "\4\0\1\5\1\0\2\5\1\155\43\5\27\0\2\5"+
    "\4\0\1\5\1\0\31\5\1\156\14\5\27\0\2\5"+
    "\4\0\1\5\1\0\21\5\1\157\24\5\27\0\2\5"+
    "\4\0\1\5\1\0\1\160\45\5\27\0\2\5\4\0"+
    "\1\5\1\0\14\5\1\161\31\5\27\0\2\5\4\0"+
    "\1\5\1\0\1\162\45\5\27\0\2\5\4\0\1\5"+
    "\1\0\13\5\1\163\32\5\27\0\2\5\4\0\1\5"+
    "\1\0\25\5\1\164\20\5\27\0\2\5\4\0\1\5"+
    "\1\0\12\5\1\165\33\5\27\0\2\5\4\0\1\5"+
    "\1\0\1\166\45\5\27\0\2\5\4\0\1\5\1\0"+
    "\2\5\1\167\43\5\27\0\2\5\4\0\1\5\1\0"+
    "\14\5\1\170\31\5\27\0\2\5\4\0\1\5\1\0"+
    "\24\5\1\171\21\5\30\0\1\172\4\0\1\173\76\0"+
    "\2\5\4\0\1\5\1\0\4\5\1\174\4\5\1\175"+
    "\6\5\1\176\1\5\1\177\3\5\1\200\1\201\4\5"+
    "\1\202\1\203\1\204\1\205\6\5\27\0\2\5\4\0"+
    "\1\5\1\0\15\5\1\206\30\5\27\0\2\5\4\0"+
    "\1\5\1\0\17\5\1\207\26\5\27\0\2\5\4\0"+
    "\1\5\1\0\3\5\1\210\42\5\27\0\2\5\4\0"+
    "\1\5\1\0\17\5\1\211\26\5\27\0\2\5\4\0"+
    "\1\5\1\0\6\5\1\212\37\5\27\0\2\5\4\0"+
    "\1\5\1\0\36\5\1\213\4\5\1\214\2\5\27\0"+
    "\2\5\4\0\1\5\1\0\14\5\1\215\31\5\27\0"+
    "\2\5\4\0\1\5\1\0\31\5\1\216\14\5\27\0"+
    "\2\5\4\0\1\5\1\0\32\5\1\217\13\5\27\0"+
    "\2\5\4\0\1\5\1\0\6\5\1\220\37\5\27\0"+
    "\2\5\4\0\1\5\1\0\30\5\1\221\15\5\27\0"+
    "\2\5\4\0\1\5\1\0\6\5\1\222\37\5\30\0"+
    "\1\172\4\0\1\172\76\0\2\5\4\0\1\5\1\0"+
    "\2\5\1\223\43\5\27\0\2\5\4\0\1\5\1\0"+
    "\2\5\1\224\43\5\27\0\2\5\4\0\1\5\1\0"+
    "\2\5\1\225\43\5\27\0\2\5\4\0\1\5\1\0"+
    "\2\5\1\226\43\5\27\0\2\5\4\0\1\5\1\0"+
    "\23\5\1\227\22\5\27\0\2\5\4\0\1\5\1\0"+
    "\14\5\1\230\31\5\27\0\2\5\4\0\1\5\1\0"+
    "\21\5\1\231\6\5\1\232\15\5\27\0\2\5\4\0"+
    "\1\5\1\0\13\5\1\233\12\5\1\234\17\5\27\0"+
    "\2\5\4\0\1\5\1\0\26\5\1\235\17\5\27\0"+
    "\2\5\4\0\1\5\1\0\2\5\1\236\43\5\27\0"+
    "\2\5\4\0\1\5\1\0\2\5\1\237\43\5\27\0"+
    "\2\5\4\0\1\5\1\0\26\5\1\240\17\5\27\0"+
    "\2\5\4\0\1\5\1\0\32\5\1\241\13\5\27\0"+
    "\2\5\4\0\1\5\1\0\2\5\1\242\43\5\27\0"+
    "\2\5\4\0\1\5\1\0\2\5\1\243\43\5\27\0"+
    "\2\5\4\0\1\5\1\0\15\5\1\244\30\5\27\0"+
    "\2\5\4\0\1\5\1\0\5\5\1\245\40\5\27\0"+
    "\2\5\4\0\1\5\1\0\2\5\1\246\43\5\27\0"+
    "\2\5\4\0\1\5\1\0\6\5\1\247\37\5\27\0"+
    "\2\5\4\0\1\5\1\0\5\5\1\250\40\5\27\0"+
    "\2\5\4\0\1\5\1\0\33\5\1\251\12\5\27\0"+
    "\2\5\4\0\1\5\1\0\21\5\1\252\3\5\1\253"+
    "\20\5\27\0\2\5\4\0\1\5\1\0\23\5\1\254"+
    "\7\5\1\255\12\5\27\0\2\5\4\0\1\5\1\0"+
    "\30\5\1\256\15\5\27\0\2\5\4\0\1\5\1\0"+
    "\13\5\1\257\32\5\27\0\2\5\4\0\1\5\1\0"+
    "\26\5\1\260\17\5\27\0\2\5\4\0\1\5\1\0"+
    "\1\5\1\261\44\5\27\0\2\5\4\0\1\5\1\0"+
    "\21\5\1\262\24\5\27\0\2\5\4\0\1\5\1\0"+
    "\12\5\1\263\33\5\27\0\2\5\4\0\1\5\1\0"+
    "\21\5\1\264\24\5\27\0\2\5\4\0\1\5\1\0"+
    "\6\5\1\265\37\5\27\0\2\5\4\0\1\5\1\0"+
    "\23\5\1\266\22\5\27\0\2\5\4\0\1\5\1\0"+
    "\1\267\45\5\27\0\2\5\4\0\1\5\1\0\23\5"+
    "\1\270\22\5\27\0\2\5\4\0\1\5\1\0\16\5"+
    "\1\271\27\5\27\0\2\5\4\0\1\5\1\0\2\5"+
    "\1\272\43\5\27\0\2\5\4\0\1\5\1\0\6\5"+
    "\1\273\37\5\27\0\2\5\4\0\1\5\1\0\21\5"+
    "\1\274\24\5\27\0\2\5\4\0\1\5\1\0\2\5"+
    "\1\275\43\5\27\0\2\5\4\0\1\5\1\0\2\5"+
    "\1\276\43\5\27\0\2\5\4\0\1\5\1\0\13\5"+
    "\1\277\32\5\27\0\2\5\4\0\1\5\1\0\2\5"+
    "\1\300\43\5\27\0\2\5\4\0\1\5\1\0\24\5"+
    "\1\301\21\5\27\0\2\5\4\0\1\5\1\0\2\5"+
    "\1\302\43\5\27\0\2\5\4\0\1\5\1\0\1\303"+
    "\45\5\27\0\2\5\4\0\1\5\1\0\30\5\1\304"+
    "\15\5\27\0\2\5\4\0\1\5\1\0\25\5\1\305"+
    "\20\5\27\0\2\5\4\0\1\5\1\0\26\5\1\306"+
    "\17\5\27\0\2\5\4\0\1\5\1\0\2\5\1\307"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\2\5\1\310"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\13\5\1\311"+
    "\32\5\27\0\2\5\4\0\1\5\1\0\2\5\1\312"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\33\5\1\313"+
    "\12\5\27\0\2\5\4\0\1\5\1\0\2\5\1\314"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\2\5\1\315"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\6\5\1\316"+
    "\37\5\27\0\2\5\4\0\1\5\1\0\2\5\1\317"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\6\5\1\320"+
    "\37\5\27\0\2\5\4\0\1\5\1\0\3\5\1\321"+
    "\42\5\27\0\2\5\4\0\1\5\1\0\25\5\1\322"+
    "\20\5\27\0\2\5\4\0\1\5\1\0\5\5\1\323"+
    "\40\5\27\0\2\5\4\0\1\5\1\0\2\5\1\324"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\21\5\1\325"+
    "\24\5\27\0\2\5\4\0\1\5\1\0\30\5\1\326"+
    "\15\5\27\0\2\5\4\0\1\5\1\0\30\5\1\327"+
    "\15\5\27\0\2\5\4\0\1\5\1\0\5\5\1\330"+
    "\40\5\27\0\2\5\4\0\1\5\1\0\31\5\1\331"+
    "\14\5\27\0\2\5\4\0\1\5\1\0\2\5\1\332"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\31\5\1\333"+
    "\14\5\27\0\2\5\4\0\1\5\1\0\31\5\1\334"+
    "\14\5\27\0\2\5\4\0\1\5\1\0\2\5\1\335"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\5\5\1\336"+
    "\40\5\27\0\2\5\4\0\1\5\1\0\5\5\1\337"+
    "\40\5\27\0\2\5\4\0\1\5\1\0\36\5\1\340"+
    "\7\5\27\0\2\5\4\0\1\5\1\0\2\5\1\341"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\23\5\1\342"+
    "\22\5\27\0\2\5\4\0\1\5\1\0\2\5\1\343"+
    "\43\5\27\0\2\5\4\0\1\5\1\0\5\5\1\344"+
    "\40\5\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11247];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\2\1\1\11\2\1\1\11"+
    "\20\1\16\11\3\1\4\11\1\1\1\11\2\1\2\0"+
    "\25\1\5\11\27\1\1\0\23\1\1\11\151\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ConyoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [133] { return symbol(sym.STRING, yytext()); }");
          { return symbol(sym.STRING, yytext());
          }
        case 71: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [145] { System.out.println(\"Invalid.\"); }");
          { System.out.println("Invalid.");
          }
        case 72: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [127] { return symbol(sym.IDENTIFIER, yytext()); }");
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 73: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [125] { return symbol(sym.INTEGER, Integer.parseInt(yytext())); }");
          { return symbol(sym.INTEGER, Integer.parseInt(yytext()));
          }
        case 74: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [141] { /*blank*/ }");
          { /*blank*/
          }
        case 75: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [107] { return symbol(sym.PERIOD); }");
          { return symbol(sym.PERIOD);
          }
        case 76: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [98] { return symbol(sym.COMMA); }");
          { return symbol(sym.COMMA);
          }
        case 77: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [99] { return symbol(sym.COLON); }");
          { return symbol(sym.COLON);
          }
        case 78: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [100] { return symbol(sym.DOLLAR_SIGN); }");
          { return symbol(sym.DOLLAR_SIGN);
          }
        case 79: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [101] { return symbol(sym.LEFT_PAREN); }");
          { return symbol(sym.LEFT_PAREN);
          }
        case 80: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [102] { return symbol(sym.RIGHT_PAREN); }");
          { return symbol(sym.RIGHT_PAREN);
          }
        case 81: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [103] { return symbol(sym.LEFT_BRACE); }");
          { return symbol(sym.LEFT_BRACE);
          }
        case 82: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [104] { return symbol(sym.RIGHT_BRACE); }");
          { return symbol(sym.RIGHT_BRACE);
          }
        case 83: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [105] { return symbol(sym.LEFT_CURLY); }");
          { return symbol(sym.LEFT_CURLY);
          }
        case 84: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [106] { return symbol(sym.RIGHT_CURLY); }");
          { return symbol(sym.RIGHT_CURLY);
          }
        case 85: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [108] { return symbol(sym.PLUS); }");
          { return symbol(sym.PLUS);
          }
        case 86: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [109] { return symbol(sym.MINUS); }");
          { return symbol(sym.MINUS);
          }
        case 87: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [110] { return symbol(sym.TIMES); }");
          { return symbol(sym.TIMES);
          }
        case 88: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [111] { return symbol(sym.DIVIDE); }");
          { return symbol(sym.DIVIDE);
          }
        case 89: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [112] { return symbol(sym.MODULO); }");
          { return symbol(sym.MODULO);
          }
        case 90: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [114] { return symbol(sym.LESS_THAN); }");
          { return symbol(sym.LESS_THAN);
          }
        case 91: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [116] { return symbol(sym.GREATER_THAN); }");
          { return symbol(sym.GREATER_THAN);
          }
        case 92: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [119] { return symbol(sym.AND); }");
          { return symbol(sym.AND);
          }
        case 93: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [120] { return symbol(sym.OR); }");
          { return symbol(sym.OR);
          }
        case 94: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [121] { yybegin(CHARACTER); }");
          { yybegin(CHARACTER);
          }
        case 95: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [122] { yybegin(STRING); }");
          { yybegin(STRING);
          }
        case 96: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [132] { yybegin(YYINITIAL); return symbol(sym.MAKE_LAGAY); }");
          { yybegin(YYINITIAL); return symbol(sym.MAKE_LAGAY);
          }
        case 97: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [92] { return symbol(sym.DB); }");
          { return symbol(sym.DB);
          }
        case 98: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [113] { return symbol(sym.NOT_EQUAL); }");
          { return symbol(sym.NOT_EQUAL);
          }
        case 99: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [115] { return symbol(sym.LT_EQUAL); }");
          { return symbol(sym.LT_EQUAL);
          }
        case 100: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [117] { return symbol(sym.GT_EQUAL); }");
          { return symbol(sym.GT_EQUAL);
          }
        case 101: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [118] { return symbol(sym.EQUAL_EQUAL); }");
          { return symbol(sym.EQUAL_EQUAL);
          }
        case 102: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [138] { yybegin(YYINITIAL); return symbol(sym.CHARACTER, yytext().substring(0, 1)); }");
          { yybegin(YYINITIAL); return symbol(sym.CHARACTER, yytext().substring(0, 1));
          }
        case 103: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [126] { return symbol(sym.FLOAT, Float.parseFloat(yytext())); }");
          { return symbol(sym.FLOAT, Float.parseFloat(yytext()));
          }
        case 104: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [58] { return symbol(sym.OMG); }");
          { return symbol(sym.OMG);
          }
        case 105: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [76] { return symbol(sym.MRW); }");
          { return symbol(sym.MRW);
          }
        case 106: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [77] { return symbol(sym.MDR); }");
          { return symbol(sym.MDR);
          }
        case 107: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [86] { return symbol(sym.YUHH); }");
          { return symbol(sym.YUHH);
          }
        case 108: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [81] { return symbol(sym.INTY); }");
          { return symbol(sym.INTY);
          }
        case 109: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [88] { return symbol(sym.POOR); }");
          { return symbol(sym.POOR);
          }
        case 110: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [87] { return symbol(sym.NUHH); }");
          { return symbol(sym.NUHH);
          }
        case 111: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [93] { return symbol(sym.CNYO); }");
          { return symbol(sym.CNYO);
          }
        case 112: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [60] { return symbol(sym.BAYAD); }");
          { return symbol(sym.BAYAD);
          }
        case 113: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [85] { return symbol(sym.BOOLY); }");
          { return symbol(sym.BOOLY);
          }
        case 114: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [89] { return symbol(sym.WALEY); }");
          { return symbol(sym.WALEY);
          }
        case 115: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [83] { return symbol(sym.CHARY); }");
          { return symbol(sym.CHARY);
          }
        case 116: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [68] { return symbol(sym.MAKEUP); }");
          { return symbol(sym.MAKEUP);
          }
        case 117: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [82] { return symbol(sym.FLOATY); }");
          { return symbol(sym.FLOATY);
          }
        case 118: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [67] { return symbol(sym.BREAKUP); }");
          { return symbol(sym.BREAKUP);
          }
        case 119: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [84] { return symbol(sym.STRINGY); }");
          { return symbol(sym.STRINGY);
          }
        case 120: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [79] { return symbol(sym.MAKE_GAWA); }");
          { return symbol(sym.MAKE_GAWA);
          }
        case 121: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [71] { return symbol(sym.MAKE_BASA); }");
          { return symbol(sym.MAKE_BASA);
          }
        case 122: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [64] { return symbol(sym.MAKE_ARTE); }");
          { return symbol(sym.MAKE_ARTE);
          }
        case 123: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [80] { return symbol(sym.MAKE_ULIT); }");
          { return symbol(sym.MAKE_ULIT);
          }
        case 124: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [90] { return symbol(sym.MAKE_KUHA); }");
          { return symbol(sym.MAKE_KUHA);
          }
        case 125: break;
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [59] { return symbol(sym.HIRE_YAYA); }");
          { return symbol(sym.HIRE_YAYA);
          }
        case 126: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [65] { return symbol(sym.BRAND_NEW); }");
          { return symbol(sym.BRAND_NEW);
          }
        case 127: break;
        case 58: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [57] { return symbol(sym.MAKE_LAGAY); }");
          { return symbol(sym.MAKE_LAGAY);
          }
        case 128: break;
        case 59: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [61] { return symbol(sym.MAKE_BALIK); }");
          { return symbol(sym.MAKE_BALIK);
          }
        case 129: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [62] { return symbol(sym.MAKE_TAPOS); }");
          { return symbol(sym.MAKE_TAPOS);
          }
        case 130: break;
        case 61: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [69] { return symbol(sym.MAKE_TAWAG); }");
          { return symbol(sym.MAKE_TAWAG);
          }
        case 131: break;
        case 62: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [70] { return symbol(sym.MAKE_SULAT); }");
          { return symbol(sym.MAKE_SULAT);
          }
        case 132: break;
        case 63: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [75] { return symbol(sym.MAKE_PALIT); }");
          { return symbol(sym.MAKE_PALIT);
          }
        case 133: break;
        case 64: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [72] { return symbol(sym.LIKE_KAPAG); }");
          { return symbol(sym.LIKE_KAPAG);
          }
        case 134: break;
        case 65: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [63] { return symbol(sym.SUPER_YAYA); }");
          { return symbol(sym.SUPER_YAYA);
          }
        case 135: break;
        case 66: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [66] { return symbol(sym.MAKE_UTUSAN); }");
          { return symbol(sym.MAKE_UTUSAN);
          }
        case 136: break;
        case 67: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [91] { return symbol(sym.MAKE_SIMULA); }");
          { return symbol(sym.MAKE_SIMULA);
          }
        case 137: break;
        case 68: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [78] { return symbol(sym.LIKE_HABANG); }");
          { return symbol(sym.LIKE_HABANG);
          }
        case 138: break;
        case 69: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [73] { return symbol(sym.THIS_NALANG); }");
          { return symbol(sym.THIS_NALANG);
          }
        case 139: break;
        case 70: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [74] { return symbol(sym.THIS_NALANG_KAPAG); }");
          { return symbol(sym.THIS_NALANG_KAPAG);
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
                System.out.println("action [143] { return symbol(sym.EOF); }");
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ConyoLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ConyoLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ConyoLexer(reader);
          /*do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);*/
	  Parser p = new Parser(scanner);
	  p.parse();	
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
