/* The following code was generated by JFlex 1.6.0 */

/*Import*/
import java.io.*;
import java_cup.runtime.*;

/**
 * Conyo++ Language Lexer
 * CHUA, Jedrick
 * LIVELO, Evan Dennison
 * YAO, John Paul
 */

class ConyoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\5\1\5\1\3\1\76\1\76\1\4\22\0\1\5\1\0"+
    "\1\75\1\0\1\61\1\70\1\70\1\74\1\62\1\63\1\70\1\70"+
    "\1\57\1\70\1\10\1\70\1\7\11\2\1\60\1\0\1\72\1\71"+
    "\1\73\2\0\1\40\1\31\1\1\1\53\2\1\1\22\1\54\2\1"+
    "\1\47\1\15\1\21\1\43\1\20\1\50\1\1\1\51\1\46\1\33"+
    "\1\45\1\1\1\52\1\1\1\26\1\1\1\64\1\6\1\65\1\0"+
    "\1\0\1\0\1\13\1\27\1\56\1\30\1\11\1\55\1\16\1\23"+
    "\1\24\1\1\1\14\1\32\1\12\1\42\1\35\1\34\1\1\1\25"+
    "\1\36\1\41\1\37\1\1\1\44\1\1\1\17\1\1\1\66\1\70"+
    "\1\67\7\0\1\76\u1fa2\0\1\76\1\76\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\2\5\1\4"+
    "\1\6\17\3\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\3\20\1\21\1\22\1\1\1\23"+
    "\1\2\1\5\14\0\1\24\11\0\1\25\2\26\2\0"+
    "\1\27\31\0\1\30\2\26\13\0\1\31\13\0\1\32"+
    "\30\0\1\33\6\0\1\34\2\0\1\35\2\0\1\36"+
    "\1\37\4\0\1\40\1\41\1\42\1\0\1\43\1\44"+
    "\1\0\1\45\1\0\1\46\1\47\4\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\275\0\374\0\275\0\u013b"+
    "\0\u017a\0\275\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\275\0\275\0\u056a\0\u05a9\0\275\0\275\0\u05e8"+
    "\0\275\0\u0627\0\u0627\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\275"+
    "\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\275\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\275\0\u0c4e"+
    "\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\275\0\u1275\0\275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0"+
    "\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\275\0\u1569"+
    "\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761"+
    "\0\u17a0\0\u17df\0\275\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\275\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\u1f02\0\u1f41\0\275\0\u1f80\0\u1fbf\0\275\0\u1ffe\0\u203d"+
    "\0\275\0\275\0\u207c\0\u20bb\0\u20fa\0\u2139\0\275\0\275"+
    "\0\275\0\u2178\0\275\0\275\0\u21b7\0\275\0\u21f6\0\275"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\275";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\7\1\4\1\11"+
    "\1\12\1\5\1\13\4\5\1\14\1\15\1\16\1\5"+
    "\1\17\1\20\2\5\1\21\1\22\1\5\1\23\1\5"+
    "\1\24\1\5\1\25\2\5\1\26\1\14\1\5\1\27"+
    "\10\5\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\44"+
    "\1\46\1\47\1\0\3\50\1\7\1\10\1\50\1\4"+
    "\66\50\1\51\1\50\3\52\1\7\1\10\1\53\1\4"+
    "\66\52\1\4\1\54\101\0\1\6\4\0\1\6\1\55"+
    "\71\0\1\7\103\0\1\55\101\0\1\56\122\0\1\57"+
    "\60\0\1\60\126\0\1\61\1\0\1\62\47\0\1\63"+
    "\114\0\1\64\47\0\1\65\11\0\1\66\7\0\1\67"+
    "\70\0\1\70\73\0\1\71\107\0\1\72\100\0\1\73"+
    "\1\0\1\74\60\0\1\75\66\0\1\76\115\0\1\77"+
    "\67\0\1\100\16\0\1\101\125\0\1\43\76\0\1\43"+
    "\1\0\1\43\3\0\3\50\2\0\1\50\1\0\66\50"+
    "\1\0\1\50\74\0\1\102\4\0\1\103\4\0\1\104"+
    "\103\0\1\105\105\0\1\106\75\0\1\107\126\0\1\43"+
    "\75\0\1\43\52\0\1\110\112\0\1\111\54\0\1\112"+
    "\70\0\1\113\1\0\1\114\120\0\1\115\55\0\1\116"+
    "\117\0\1\117\75\0\1\120\67\0\1\121\75\0\1\122"+
    "\104\0\1\123\101\0\1\124\54\0\1\125\102\0\1\126"+
    "\61\0\1\103\4\0\1\103\1\0\1\127\76\0\1\127"+
    "\76\0\1\130\110\0\1\43\64\0\1\131\104\0\1\43"+
    "\72\0\1\132\76\0\1\133\125\0\1\134\66\0\1\111"+
    "\55\0\1\135\112\0\1\43\62\0\1\136\111\0\1\137"+
    "\110\0\1\140\51\0\1\111\100\0\1\64\110\0\1\111"+
    "\106\0\1\141\43\0\1\142\4\0\1\143\104\0\1\144"+
    "\4\0\1\145\6\0\1\146\1\0\1\147\3\0\1\150"+
    "\1\151\4\0\1\152\1\153\1\154\1\155\54\0\1\156"+
    "\100\0\1\157\62\0\1\160\112\0\1\161\115\0\1\162"+
    "\4\0\1\163\47\0\1\164\113\0\1\165\77\0\1\166"+
    "\35\0\1\142\4\0\1\142\102\0\1\167\76\0\1\170"+
    "\76\0\1\171\76\0\1\172\117\0\1\173\67\0\1\174"+
    "\103\0\1\175\6\0\1\176\74\0\1\177\76\0\1\200"+
    "\52\0\1\201\76\0\1\202\122\0\1\203\102\0\1\204"+
    "\46\0\1\205\76\0\1\206\111\0\1\207\66\0\1\111"+
    "\73\0\1\210\101\0\1\211\124\0\1\212\64\0\1\213"+
    "\3\0\1\214\74\0\1\215\7\0\1\216\73\0\1\217"+
    "\61\0\1\220\111\0\1\221\71\0\1\222\67\0\1\212"+
    "\105\0\1\175\63\0\1\223\113\0\1\224\53\0\1\225"+
    "\121\0\1\226\71\0\1\227\62\0\1\230\115\0\1\231"+
    "\57\0\1\111\76\0\1\43\107\0\1\232\65\0\1\233"+
    "\120\0\1\234\54\0\1\235\74\0\1\236\126\0\1\43"+
    "\73\0\1\237\53\0\1\240\76\0\1\241\127\0\1\242"+
    "\45\0\1\243\76\0\1\244\102\0\1\245\72\0\1\246"+
    "\77\0\1\247\120\0\1\250\56\0\1\251\73\0\1\252"+
    "\124\0\1\253\53\0\1\254\122\0\1\255\47\0\1\256"+
    "\125\0\1\257\76\0\1\260\52\0\1\43\76\0\1\261"+
    "\127\0\1\262\42\0\1\263\117\0\1\264\55\0\1\265"+
    "\101\0\1\266\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\2\11\1\1\1\11\2\1\1\11"+
    "\17\1\12\11\2\1\2\11\1\1\1\11\2\1\14\0"+
    "\1\11\11\0\1\11\2\1\2\0\1\11\31\0\1\11"+
    "\1\1\1\11\13\0\1\11\13\0\1\11\30\0\1\11"+
    "\6\0\1\11\2\0\1\11\2\0\2\11\4\0\3\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\11\1\1\4\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ConyoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [132] { return symbol(sym.STRING, yytext()); }");
          { return symbol(sym.STRING, yytext());
          }
        case 41: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [144] { System.out.println(\"Invalid.\"); }");
          { System.out.println("Invalid.");
          }
        case 42: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [125] { return symbol(sym.LETTER, yytext().charAt(0)); }");
          { return symbol(sym.LETTER, yytext().charAt(0));
          }
        case 43: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [124] { return symbol(sym.INTEGER, Integer.parseInt(yytext())); }");
          { return symbol(sym.INTEGER, Integer.parseInt(yytext()));
          }
        case 44: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [140] { /*blank*/ }");
          { /*blank*/
          }
        case 45: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [105] { return symbol(sym.PERIOD); }");
          { return symbol(sym.PERIOD);
          }
        case 46: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [96] { return symbol(sym.COMMA); }");
          { return symbol(sym.COMMA);
          }
        case 47: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [97] { return symbol(sym.COLON); }");
          { return symbol(sym.COLON);
          }
        case 48: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [98] { return symbol(sym.DOLLAR_SIGN); }");
          { return symbol(sym.DOLLAR_SIGN);
          }
        case 49: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [99] { return symbol(sym.LEFT_PAREN); }");
          { return symbol(sym.LEFT_PAREN);
          }
        case 50: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [100] { return symbol(sym.RIGHT_PAREN); }");
          { return symbol(sym.RIGHT_PAREN);
          }
        case 51: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [101] { return symbol(sym.LEFT_BRACE); }");
          { return symbol(sym.LEFT_BRACE);
          }
        case 52: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [102] { return symbol(sym.RIGHT_BRACE); }");
          { return symbol(sym.RIGHT_BRACE);
          }
        case 53: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [103] { return symbol(sym.LEFT_CURLY); }");
          { return symbol(sym.LEFT_CURLY);
          }
        case 54: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [104] { return symbol(sym.RIGHT_CURLY); }");
          { return symbol(sym.RIGHT_CURLY);
          }
        case 55: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [106] { return symbol(sym.MAKE_LAGAY); }");
          { return symbol(sym.MAKE_LAGAY);
          }
        case 56: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [120] { yybegin(CHARACTER); }");
          { yybegin(CHARACTER);
          }
        case 57: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [121] { yybegin(STRING); }");
          { yybegin(STRING);
          }
        case 58: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [131] { yybegin(YYINITIAL); return symbol(sym.MAKE_LAGAY); }");
          { yybegin(YYINITIAL); return symbol(sym.MAKE_LAGAY);
          }
        case 59: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [90] { return symbol(sym.DB); }");
          { return symbol(sym.DB);
          }
        case 60: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [137] { yybegin(YYINITIAL); return symbol(sym.CHARACTER, yytext().substring(0, 1)); }");
          { yybegin(YYINITIAL); return symbol(sym.CHARACTER, yytext().substring(0, 1));
          }
        case 61: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [126] { return symbol(sym.FLOAT, Float.parseFloat(yytext())); }");
          { return symbol(sym.FLOAT, Float.parseFloat(yytext()));
          }
        case 62: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [57] { return symbol(sym.OMG); }");
          { return symbol(sym.OMG);
          }
        case 63: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [91] { return symbol(sym.CNYO); }");
          { return symbol(sym.CNYO);
          }
        case 64: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [59] { return symbol(sym.BAYAD); }");
          { return symbol(sym.BAYAD);
          }
        case 65: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [67] { return symbol(sym.MAKEUP); }");
          { return symbol(sym.MAKEUP);
          }
        case 66: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [66] { return symbol(sym.BREAKUP); }");
          { return symbol(sym.BREAKUP);
          }
        case 67: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [70] { return symbol(sym.MAKE_BASA); }");
          { return symbol(sym.MAKE_BASA);
          }
        case 68: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [63] { return symbol(sym.MAKE_ARTE); }");
          { return symbol(sym.MAKE_ARTE);
          }
        case 69: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [58] { return symbol(sym.HIRE_YAYA); }");
          { return symbol(sym.HIRE_YAYA);
          }
        case 70: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [64] { return symbol(sym.BRAND_NEW); }");
          { return symbol(sym.BRAND_NEW);
          }
        case 71: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [60] { return symbol(sym.MAKE_BALIK); }");
          { return symbol(sym.MAKE_BALIK);
          }
        case 72: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [61] { return symbol(sym.MAKE_TAPOS); }");
          { return symbol(sym.MAKE_TAPOS);
          }
        case 73: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [68] { return symbol(sym.MAKE_TAWAG); }");
          { return symbol(sym.MAKE_TAWAG);
          }
        case 74: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [69] { return symbol(sym.MAKE_SULAT); }");
          { return symbol(sym.MAKE_SULAT);
          }
        case 75: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [71] { return symbol(sym.LIKE_KAPAG); }");
          { return symbol(sym.LIKE_KAPAG);
          }
        case 76: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [62] { return symbol(sym.SUPER_YAYA); }");
          { return symbol(sym.SUPER_YAYA);
          }
        case 77: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [65] { return symbol(sym.MAKE_UTUSAN); }");
          { return symbol(sym.MAKE_UTUSAN);
          }
        case 78: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [72] { return symbol(sym.THIS_NALANG); }");
          { return symbol(sym.THIS_NALANG);
          }
        case 79: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
          System.out.println("action [73] { return symbol(sym.THIS_NALANG_KAPAG); }");
          { return symbol(sym.THIS_NALANG_KAPAG);
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
                System.out.println("action [142] { return symbol(sym.EOF); }");
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ConyoLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ConyoLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ConyoLexer(reader);
          /*do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);*/
			Parser p = new Parser(scanner);
			p.parse();

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
