import java_cup.runtime.*;

parser code {:
	StringBuilder sb = new StringBuilder();
	public void addText(String text)
	{
		sb.append(text);
		sb.append("\t\n");
	}
	public void printText()
	{
		System.out.println(sb);
	}
:};

/* Terminals */
terminal            OMG, HIRE_YAYA, BAYAD, MAKE_BALIK;
terminal			SUPER_YAYA, MAKE_ARTE, BRAND_NEW, MAKE_UTUSAN, BREAKUP, MAKEUP;
terminal			MAKE_TAWAG, MAKE_SULAT, MAKE_BASA, LIKE_KAPAG, THIS_NALANG, THIS_NALANG_KAPAG;
terminal			MAKE_PALIT, MRW, MDR, LIKE_HABANG, MAKE_GAWA, MAKE_ULIT;
terminal String		INTY, FLOATY, CHARY, STRINGY, BOOLY, POOR;
terminal			MAKE_KUHA, MAKE_SIMULA, MAKE_SABI, DB;
terminal			COMMA, COLON, DOLLAR_SIGN, LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE;
terminal			LEFT_CURLY, RIGHT_CURLY; 
terminal			PERIOD, PLUS, MINUS, TIMES, DIVIDE, MODULO;
terminal			NOT_EQUAL, LESS_THAN, LT_EQUAL, GREATER_THAN, GT_EQUAL, EQUAL_EQUAL, AND, OR, NOT;
terminal 			POS_INC, NEG_INC;
terminal String		IDENTIFIER;
terminal String		STRING_LITERAL;
terminal Character 	CHAR_LITERAL;
terminal Float		FLOAT_LITERAL;			
terminal Integer    INT_LITERAL;
terminal String		BOOL_LITERAL;
terminal String		WALEY;
/*Terminals for precedence*/
terminal			LONG_NAME, SHORT_NAME;

/* Non terminals */
/*Program*/
non terminal			conyogram;
/*Program Breakdown*/
non terminal			OMG_section;
non terminal			OMG_list;
non terminal			OMG_dec;
non terminal			yaya_section;
non terminal			yaya_list;
non terminal			sub_yaya_section;
non terminal			sub_yaya_list;
non terminal			super_yaya;
non terminal			error_checking;
/*Literals, Data Types, Names*/
non terminal			literal;
non terminal String		data_type;
non terminal			primitive_dt;
non terminal			reference_dt;
non terminal			array_dt;
non terminal			valid_name;
non terminal			valid_var;
/*Class Declaration Productions*/
non terminal			sub_yaya;
non terminal			sy_body;
non terminal			sy_opt;
non terminal			sy_cont_list;
non terminal			sy_cont;
non terminal			constructor;
non terminal			sy_init;
/*Variable Declaration Productions*/
non terminal			arte_dec;
non terminal			arte_assign;
non terminal			arte_init;
/*Function Declaration Productions*/
non terminal			yaya;
non terminal			yaya_header;
non terminal			yaya_param_sec;
non terminal			yaya_param_list;
non terminal			yaya_param;
/*Array Productions*/
non terminal			array_init;
non terminal			arte_init_list;
non terminal			arte_init_opt;
non terminal			brackets;
non terminal			ref_brackets;
/*Program Code Productions*/
non terminal			utos_block;
non terminal			utos_block_opt;
non terminal			block_content;
non terminal			utos_dec;
non terminal			utos_dec_nodb;
non terminal			utos_dec_db;
non terminal			utos_dec_val;
non terminal			utos_makeKuha;
non terminal			utos_makeTawag;
non terminal			utos_makeSulat;
non terminal			utos_makeBasa;
non terminal			utos_likeKapag;
non terminal			utos_thisNalang;
non terminal			utos_makePalit;
non terminal			makePalit_MRW;
non terminal			utos_likeHabang;
non terminal			utos_makeGawaHabang;
non terminal			utos_makeUlit;
non terminal			utos_makeArte;
non terminal			utos_makeSabi;
/*Expression Relations*/
non terminal			sabi_sabi;
non terminal			sabi_sabi_end;
non terminal			sabi_sabi_for;
non terminal			ss_OR;
non terminal			ss_AND;
non terminal			ss_equality;
non terminal			ss_comparison;
non terminal			ss_a1;
non terminal			ss_a2;
non terminal			ss_unary_1;
non terminal			ss_unary_2;
non terminal			ss_paren;
non terminal			equality;
non terminal			comparison;
non terminal			arithmetic_1;
non terminal			arithmetic_2;

/*Precedences*/
precedence left SHORT_NAME;
precedence left LONG_NAME;

/*Start*/
start with conyogram;

/**
 * CONYO++ GRAMMAR RULES 
 */
 
/*Program*/

conyogram ::= OMG_section yaya_section sub_yaya_section super_yaya 
				{: System.out.println("PROGRAM PARSED.\n"); printText(); :};

/*Program Breakdown*/

OMG_section ::= OMG_list | ;
OMG_list ::= OMG_dec
			| OMG_dec OMG_list;
			
OMG_dec ::= OMG IDENTIFIER:id MAKE_KUHA sabi_sabi DB
			{: addText("ADDED NEW CONSTANT " + id + "."); :}
			| OMG error DB {: addText("Error in Constant Declaration"); :}
			| error DB {: addText("Erroneous statement found before main and function declarations"); :}
;

yaya_section ::= yaya_list | ;
yaya_list ::= yaya
			| yaya yaya_list;

sub_yaya_section ::= sub_yaya_list | ;
sub_yaya_list ::= sub_yaya
				| sub_yaya sub_yaya_list;
				
super_yaya ::= SUPER_YAYA utos_block
				{: addText("MAIN FUNCTION FOUND!"); :};

/*Literals, Data Types, Names*/

literal ::= INT_LITERAL
			| FLOAT_LITERAL
			| STRING_LITERAL
			| CHAR_LITERAL
			| BOOL_LITERAL
			| WALEY;

data_type ::= primitive_dt
			| reference_dt;
primitive_dt ::= INTY
				| FLOATY
				| STRINGY
				| CHARY
				| BOOLY;
reference_dt ::= valid_name
				| array_dt;
array_dt ::= primitive_dt brackets
			| valid_name brackets;
			
valid_name ::= IDENTIFIER
			| valid_name COLON IDENTIFIER %prec LONG_NAME;
valid_var ::= valid_name %prec SHORT_NAME
			| valid_name ref_brackets;
			
/*Class Declaration Productions*/

sub_yaya ::= MAKE_UTUSAN IDENTIFIER:id sy_body
			{: addText("CREATED NEW CLASS: " + id + "."); :};
sy_body ::= DOLLAR_SIGN sy_opt DOLLAR_SIGN;
sy_opt ::= sy_cont_list | ;
sy_cont_list ::= sy_cont sy_cont_list
			| sy_cont;
sy_cont ::= arte_dec
		| yaya
		| constructor;
constructor ::= MAKE_SIMULA IDENTIFIER utos_block;
sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN;

/*Variable Declaration Productions*/

arte_dec ::= MAKE_ARTE data_type IDENTIFIER:id arte_assign DB
		{: addText("DECLARED NEW VARIABLE: " + id + "."); :}
		| MAKE_ARTE error DB {: addText("Error in Variable Declaration"); :};
arte_assign ::= MAKE_KUHA arte_init
			| ;
arte_init ::= array_init
			| sy_init
			| sabi_sabi;

/*Function Declaration Productions*/

yaya ::= yaya_header utos_block;

yaya_header ::= HIRE_YAYA IDENTIFIER:id BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER
				{: addText("CREATED NEW FUNCTION: " + id + "."); :}
			| HIRE_YAYA IDENTIFIER:id BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR
				{: addText("CREATED NEW FUNCTION: " + id + "."); :};

yaya_param_sec ::= yaya_param_list | ;
yaya_param_list ::= yaya_param COMMA yaya_param_list
				| yaya_param;
yaya_param ::= data_type IDENTIFIER;

/*Array Productions*/

array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY;
arte_init_list ::= arte_init_opt
				| ;
arte_init_opt ::= arte_init COMMA arte_init_opt
				| arte_init;
				
brackets ::= LEFT_BRACE RIGHT_BRACE brackets
			| LEFT_BRACE RIGHT_BRACE;
ref_brackets ::= LEFT_BRACE ss_OR RIGHT_BRACE;

/*Program Code Productions*/

utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN;
utos_block_opt ::= block_content | ;
block_content ::= utos_dec block_content
				| utos_dec;
utos_dec ::= utos_dec_db 
			| utos_dec_val DB
			| utos_dec_nodb;
utos_dec_nodb ::= utos_likeKapag {: addText("IF STATEMENT FOUND!"); :}
			| utos_makePalit {: addText("SWITCH STATEMENT FOUND!"); :}
			| utos_likeHabang {: addText("WHILE LOOP FOUND!"); :}
			| utos_makeGawaHabang {: addText("DO WHILE LOOP FOUND!"); :}
			| utos_makeUlit {: addText("FOR LOOP FOUND!"); :}
			| utos_makeArte
			| LIKE_KAPAG error DB{: addText("Erroneous statement found in IF statement"); :}
			| MAKE_PALIT error DB{: addText("Erroneous statement found in SWITCH statement"); :}
			| LIKE_HABANG error DB{: addText("Erroneous statement found in WHILE LOOP"); :}
			| MAKE_GAWA error DB{: addText("Erroneous statement found in DO WHILE LOOP"); :}
			| MAKE_ULIT error DB{: addText("Erroneous statement found in FOR LOOP"); :};
utos_dec_db ::= utos_makeKuha DB{: addText("ASSIGNMENT STATEMENT FOUND!"); :}
			| utos_makeSulat DB{: addText("OUTPUT FUNCTION FOUND!"); :}
			| utos_makeSabi DB{: addText("STANDALONE EXPRESSION FOUND!"); :}
			| BREAKUP DB{: addText("BREAK FOUND!"); :}
			| MAKEUP DB{: addText("CONTINUE FOUND!"); :}
			| MAKE_SULAT error DB{: addText("Erroneous statement found in OUTPUT function"); :}
			| MAKE_SABI error DB{: addText("Erroneous statement found in MAKESABI function"); :};
utos_dec_val ::= utos_makeTawag {: addText("FUNCTION CALL FOUND!"); :}
			| utos_makeBasa {: addText("INPUT FUNCTION FOUND!"); :}
			| MAKE_TAWAG error DB {: addText("Erroneous statement found in FUNCTION CALL"); :}
			| MAKE_BASA error DB {: addText("Erroneous statement found in SCAN function"); :};
utos_makeKuha ::= valid_var arte_assign;
utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN;
utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN;
utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN;
utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang;
utos_thisNalang ::= THIS_NALANG utos_block
				| THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang
				| ;
utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN;
makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW
				| MRW error DB {: addText("Erroneous statement found in one of the cases of a SWITCH statement"); :}
				| MDR COLON utos_block_opt
				| MDR error DB {: addText("Erroneous statement found in the last case of a SWITCH statement"); :}
				| ;

utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block
				| LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB;
utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB;
utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block
				| MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block;
utos_makeArte ::= arte_dec;
utos_makeSabi ::= MAKE_SABI sabi_sabi;

/*Expression Productions*/

sabi_sabi_end ::= valid_var
				| utos_dec_val
				| literal;

sabi_sabi_for ::= sabi_sabi DB;	
sabi_sabi ::= ss_OR;
ss_OR ::= ss_AND OR OR ss_OR
		| ss_AND;
ss_AND ::= ss_equality AND AND ss_AND
		| ss_equality;
ss_equality ::= ss_comparison equality ss_equality
			| ss_comparison;
ss_comparison ::= ss_a1 comparison ss_comparison
			|	ss_a1;
ss_a1 ::= ss_a2 arithmetic_1 ss_a1
		| ss_a2;
ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2
		| ss_unary_1;
ss_unary_1 ::= NOT ss_unary_1
			| PLUS PLUS ss_unary_1
			| MINUS MINUS ss_unary_1
			| ss_unary_2;
ss_unary_2 ::= ss_unary_2 POS_INC
			| ss_unary_2 NEG_INC
			| ss_paren;
ss_paren ::= LEFT_PAREN ss_paren RIGHT_PAREN
			| sabi_sabi_end;
			
equality ::= EQUAL_EQUAL
			| NOT_EQUAL;

comparison ::= GT_EQUAL
			| LT_EQUAL
			| GREATER_THAN
			| LESS_THAN;
			
arithmetic_1 ::= PLUS
			| MINUS;

arithmetic_2 ::= TIMES
			| DIVIDE
			| MODULO;

