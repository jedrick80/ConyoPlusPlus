
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\006\003\000\002\006\002\000" +
    "\002\007\003\000\002\007\004\000\002\010\003\000\002" +
    "\010\002\000\002\011\003\000\002\011\004\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\004" +
    "\000\002\017\004\000\002\020\003\000\002\020\005\000" +
    "\002\021\003\000\002\021\004\000\002\022\005\000\002" +
    "\023\005\000\002\024\003\000\002\024\002\000\002\025" +
    "\004\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\005\000\002\030\007\000" +
    "\002\031\007\000\002\031\005\000\002\032\004\000\002" +
    "\032\002\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\004\000\002\035\013\000\002\035\012" +
    "\000\002\036\003\000\002\036\002\000\002\037\005\000" +
    "\002\037\003\000\002\040\004\000\002\041\005\000\002" +
    "\042\003\000\002\042\002\000\002\043\005\000\002\043" +
    "\003\000\002\044\005\000\002\044\004\000\002\045\005" +
    "\000\002\046\005\000\002\047\003\000\002\047\002\000" +
    "\002\050\004\000\002\050\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\053\004\000\002\053\004\000" +
    "\002\053\005\000\002\053\004\000\002\053\005\000\002" +
    "\053\004\000\002\053\005\000\002\053\004\000\002\053" +
    "\005\000\002\054\004\000\002\054\005\000\002\054\004" +
    "\000\002\054\005\000\002\055\004\000\002\056\007\000" +
    "\002\057\006\000\002\060\006\000\002\061\010\000\002" +
    "\061\005\000\002\062\004\000\002\062\010\000\002\062" +
    "\002\000\002\063\011\000\002\063\005\000\002\064\007" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\002\000\002\065\007\000\002\065\007\000\002" +
    "\065\005\000\002\066\011\000\002\066\005\000\002\067" +
    "\012\000\002\067\012\000\002\067\006\000\002\067\005" +
    "\000\002\070\003\000\002\071\004\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\074\004\000\002" +
    "\072\003\000\002\075\006\000\002\075\003\000\002\076" +
    "\006\000\002\076\003\000\002\077\005\000\002\077\003" +
    "\000\002\100\005\000\002\100\003\000\002\101\005\000" +
    "\002\101\003\000\002\102\005\000\002\102\003\000\002" +
    "\103\004\000\002\103\005\000\002\103\005\000\002\103" +
    "\003\000\002\104\004\000\002\104\004\000\002\104\003" +
    "\000\002\105\005\000\002\105\003\000\002\106\003\000" +
    "\002\106\003\000\002\107\003\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\110\003\000\002\110" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\012\004\007\005\ufffe\010\ufffe\013\ufffe\001" +
    "\002\000\004\002\u0125\001\002\000\010\005\uffff\010\uffff" +
    "\013\uffff\001\002\000\012\004\007\005\ufffd\010\ufffd\013" +
    "\ufffd\001\002\000\004\076\u0120\001\002\000\010\005\011" +
    "\010\ufff9\013\ufff9\001\002\000\004\076\u0111\001\002\000" +
    "\006\010\ufffa\013\ufffa\001\002\000\006\010\ufff5\013\376" +
    "\001\002\000\004\046\020\001\002\000\010\005\011\010" +
    "\ufff8\013\ufff8\001\002\000\006\010\ufff7\013\ufff7\001\002" +
    "\000\016\005\uffca\010\uffca\011\uffca\013\uffca\041\uffca\046" +
    "\uffca\001\002\000\036\011\047\014\026\015\056\016\024" +
    "\017\025\020\027\021\023\024\021\027\032\030\035\031" +
    "\036\042\050\046\uffb8\076\031\001\002\000\006\003\347" +
    "\047\350\001\002\000\042\011\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\042\uffb3\046\uffb3\076\uffb3\001" +
    "\002\000\006\003\330\047\331\001\002\000\006\003\323" +
    "\076\031\001\002\000\006\003\315\047\316\001\002\000" +
    "\006\003\312\043\313\001\002\000\006\003\305\047\306" +
    "\001\002\000\042\011\047\014\026\015\056\016\024\017" +
    "\025\020\027\021\023\024\021\025\uffb6\026\uffb6\027\032" +
    "\030\035\031\036\042\050\046\uffb6\076\031\001\002\000" +
    "\064\040\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\054\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\070\uffe0\071\uffe0\072\uffe0\074\uffe0\075\uffe0\076\uffe0\001" +
    "\002\000\006\003\275\047\276\001\002\000\042\011\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\042\uffb5" +
    "\046\uffb5\076\uffb5\001\002\000\006\040\201\043\uffce\001" +
    "\002\000\006\003\265\046\020\001\002\000\006\003\243" +
    "\047\244\001\002\000\010\025\uffb9\026\uffb9\046\uffb9\001" +
    "\002\000\042\011\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\042\uffad\046\uffad\076\uffad\001\002\000\004" +
    "\043\242\001\002\000\042\011\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\042\uffb0\046\uffb0\076\uffb0\001" +
    "\002\000\060\040\uffde\043\uffde\044\uffde\045\uffde\050\uffde" +
    "\051\236\052\uffde\054\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde" +
    "\070\uffde\071\uffde\072\uffde\074\uffde\075\uffde\001\002\000" +
    "\004\043\235\001\002\000\042\011\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\042\uffb2\046\uffb2\076\uffb2" +
    "\001\002\000\042\011\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\042\uffb4\046\uffb4\076\uffb4\001\002\000" +
    "\020\003\173\032\174\033\166\034\167\035\177\036\172" +
    "\076\031\001\002\000\036\003\111\016\024\020\027\047" +
    "\073\056\071\057\110\073\075\076\031\077\102\100\107" +
    "\101\120\102\103\103\072\104\121\001\002\000\004\043" +
    "\070\001\002\000\042\011\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\042\uffaf\046\uffaf\076\uffaf\001\002" +
    "\000\042\011\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\042\uffb1\046\uffb1\076\uffb1\001\002\000\042\011" +
    "\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\042" +
    "\uff86\046\uff86\076\uff86\001\002\000\042\011\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\042\uffae\046\uffae" +
    "\076\uffae\001\002\000\006\003\066\043\065\001\002\000" +
    "\004\046\064\001\002\000\004\043\063\001\002\000\004" +
    "\043\062\001\002\000\042\011\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\042\uffab\046\uffab\076\uffab\001" +
    "\002\000\114\011\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\050\uffa3\052\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\074\uffa3\075\uffa3\076\uffa3\001" +
    "\002\000\060\002\uffba\005\uffba\010\uffba\011\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\041\uffba\042\uffba\046\uffba\076\uffba\001\002\000" +
    "\042\011\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\042\uffa5\046\uffa5\076\uffa5\001\002\000\004\043\067" +
    "\001\002\000\042\011\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\042\uffa4\046\uffa4\076\uffa4\001\002\000" +
    "\114\011\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050\uffa1" +
    "\052\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\074\uffa1\075\uffa1\076\uffa1\001\002\000" +
    "\004\056\163\001\002\000\054\043\uffed\044\uffed\045\uffed" +
    "\050\uffed\052\uffed\054\uffed\056\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\070\uffed\071\uffed\072\uffed\074\uffed\075\uffed\001\002\000" +
    "\026\016\024\020\027\047\073\076\031\077\102\100\107" +
    "\101\120\102\103\103\072\104\121\001\002\000\054\043" +
    "\uff6d\044\uff6d\045\uff6d\050\uff6d\052\uff6d\054\uff6d\056\uff6d" +
    "\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065" +
    "\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d\074\uff6d" +
    "\075\uff6d\001\002\000\034\016\024\020\027\047\073\056" +
    "\071\057\110\073\075\076\031\077\102\100\107\101\120" +
    "\102\103\103\072\104\121\001\002\000\020\043\uff7e\044" +
    "\uff7e\045\uff7e\050\uff7e\052\uff7e\054\uff7e\072\155\001\002" +
    "\000\054\043\uff84\044\uff84\045\uff84\050\uff84\052\uff84\054" +
    "\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84" +
    "\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072" +
    "\uff84\074\uff84\075\uff84\001\002\000\054\043\uff6b\044\uff6b" +
    "\045\uff6b\050\uff6b\052\uff6b\054\uff6b\056\uff6b\057\uff6b\060" +
    "\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b" +
    "\067\uff6b\070\uff6b\071\uff6b\072\uff6b\074\uff6b\075\uff6b\001" +
    "\002\000\026\043\uff7a\044\uff7a\045\uff7a\050\uff7a\052\uff7a" +
    "\054\uff7a\063\151\070\153\071\uff7a\072\uff7a\001\002\000" +
    "\054\043\uffef\044\uffef\045\uffef\050\uffef\052\uffef\054\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef" +
    "\074\uffef\075\uffef\001\002\000\054\043\ufff1\044\ufff1\045" +
    "\ufff1\050\ufff1\052\ufff1\054\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\074\ufff1\075\ufff1\001\002" +
    "\000\054\043\uff83\044\uff83\045\uff83\050\uff83\052\uff83\054" +
    "\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072" +
    "\uff83\074\uff83\075\uff83\001\002\000\042\043\uff76\044\uff76" +
    "\045\uff76\050\uff76\052\uff76\054\uff76\056\146\057\147\063" +
    "\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76" +
    "\072\uff76\001\002\000\036\043\uff78\044\uff78\045\uff78\050" +
    "\uff78\052\uff78\054\uff78\063\uff78\064\140\065\143\066\141" +
    "\067\137\070\uff78\071\uff78\072\uff78\001\002\000\054\043" +
    "\uffee\044\uffee\045\uffee\050\uffee\052\uffee\054\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\074\uffee" +
    "\075\uffee\001\002\000\004\057\135\001\002\000\004\043" +
    "\134\001\002\000\022\043\uff7c\044\uff7c\045\uff7c\050\uff7c" +
    "\052\uff7c\054\uff7c\071\131\072\uff7c\001\002\000\054\043" +
    "\uff82\044\uff82\045\uff82\050\uff82\052\uff82\054\uff82\056\uff82" +
    "\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065" +
    "\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\074\uff82" +
    "\075\uff82\001\002\000\014\043\uff80\044\uff80\045\uff80\050" +
    "\uff80\054\uff80\001\002\000\054\043\uff70\044\uff70\045\uff70" +
    "\050\uff70\052\uff70\054\uff70\056\uff70\057\uff70\060\uff70\061" +
    "\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066\uff70\067\uff70" +
    "\070\uff70\071\uff70\072\uff70\074\130\075\127\001\002\000" +
    "\050\043\uff74\044\uff74\045\uff74\050\uff74\052\uff74\054\uff74" +
    "\056\uff74\057\uff74\060\125\061\124\062\123\063\uff74\064" +
    "\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74" +
    "\001\002\000\004\043\uff85\001\002\000\054\043\ufff0\044" +
    "\ufff0\045\ufff0\050\ufff0\052\ufff0\054\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066" +
    "\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\074\ufff0\075\ufff0" +
    "\001\002\000\054\043\uffec\044\uffec\045\uffec\050\uffec\052" +
    "\uffec\054\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071" +
    "\uffec\072\uffec\074\uffec\075\uffec\001\002\000\034\016\024" +
    "\020\027\047\073\056\071\057\110\073\075\076\031\077" +
    "\102\100\107\101\120\102\103\103\072\104\121\001\002" +
    "\000\034\016\uff60\020\uff60\047\uff60\056\uff60\057\uff60\073" +
    "\uff60\076\uff60\077\uff60\100\uff60\101\uff60\102\uff60\103\uff60" +
    "\104\uff60\001\002\000\034\016\uff61\020\uff61\047\uff61\056" +
    "\uff61\057\uff61\073\uff61\076\uff61\077\uff61\100\uff61\101\uff61" +
    "\102\uff61\103\uff61\104\uff61\001\002\000\034\016\uff62\020" +
    "\uff62\047\uff62\056\uff62\057\uff62\073\uff62\076\uff62\077\uff62" +
    "\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62\001\002\000" +
    "\042\043\uff75\044\uff75\045\uff75\050\uff75\052\uff75\054\uff75" +
    "\056\uff75\057\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067" +
    "\uff75\070\uff75\071\uff75\072\uff75\001\002\000\054\043\uff6e" +
    "\044\uff6e\045\uff6e\050\uff6e\052\uff6e\054\uff6e\056\uff6e\057" +
    "\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e" +
    "\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\074\uff6e\075" +
    "\uff6e\001\002\000\054\043\uff6f\044\uff6f\045\uff6f\050\uff6f" +
    "\052\uff6f\054\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062" +
    "\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f" +
    "\071\uff6f\072\uff6f\074\uff6f\075\uff6f\001\002\000\004\071" +
    "\132\001\002\000\034\016\024\020\027\047\073\056\071" +
    "\057\110\073\075\076\031\077\102\100\107\101\120\102" +
    "\103\103\072\104\121\001\002\000\020\043\uff7d\044\uff7d" +
    "\045\uff7d\050\uff7d\052\uff7d\054\uff7d\072\uff7d\001\002\000" +
    "\042\011\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\042\uffa8\046\uffa8\076\uffa8\001\002\000\034\016\024" +
    "\020\027\047\073\056\071\057\110\073\075\076\031\077" +
    "\102\100\107\101\120\102\103\103\072\104\121\001\002" +
    "\000\050\043\uff71\044\uff71\045\uff71\050\uff71\052\uff71\054" +
    "\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71" +
    "\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072" +
    "\uff71\001\002\000\034\016\uff68\020\uff68\047\uff68\056\uff68" +
    "\057\uff68\073\uff68\076\uff68\077\uff68\100\uff68\101\uff68\102" +
    "\uff68\103\uff68\104\uff68\001\002\000\034\016\uff65\020\uff65" +
    "\047\uff65\056\uff65\057\uff65\073\uff65\076\uff65\077\uff65\100" +
    "\uff65\101\uff65\102\uff65\103\uff65\104\uff65\001\002\000\034" +
    "\016\uff66\020\uff66\047\uff66\056\uff66\057\uff66\073\uff66\076" +
    "\uff66\077\uff66\100\uff66\101\uff66\102\uff66\103\uff66\104\uff66" +
    "\001\002\000\034\016\024\020\027\047\073\056\071\057" +
    "\110\073\075\076\031\077\102\100\107\101\120\102\103" +
    "\103\072\104\121\001\002\000\034\016\uff67\020\uff67\047" +
    "\uff67\056\uff67\057\uff67\073\uff67\076\uff67\077\uff67\100\uff67" +
    "\101\uff67\102\uff67\103\uff67\104\uff67\001\002\000\026\043" +
    "\uff79\044\uff79\045\uff79\050\uff79\052\uff79\054\uff79\063\uff79" +
    "\070\uff79\071\uff79\072\uff79\001\002\000\034\016\024\020" +
    "\027\047\073\056\071\057\110\073\075\076\031\077\102" +
    "\100\107\101\120\102\103\103\072\104\121\001\002\000" +
    "\034\016\uff64\020\uff64\047\uff64\056\uff64\057\uff64\073\uff64" +
    "\076\uff64\077\uff64\100\uff64\101\uff64\102\uff64\103\uff64\104" +
    "\uff64\001\002\000\034\016\uff63\020\uff63\047\uff63\056\uff63" +
    "\057\uff63\073\uff63\076\uff63\077\uff63\100\uff63\101\uff63\102" +
    "\uff63\103\uff63\104\uff63\001\002\000\036\043\uff77\044\uff77" +
    "\045\uff77\050\uff77\052\uff77\054\uff77\063\uff77\064\uff77\065" +
    "\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\001\002" +
    "\000\034\016\uff69\020\uff69\047\uff69\056\uff69\057\uff69\073" +
    "\uff69\076\uff69\077\uff69\100\uff69\101\uff69\102\uff69\103\uff69" +
    "\104\uff69\001\002\000\034\016\024\020\027\047\073\056" +
    "\071\057\110\073\075\076\031\077\102\100\107\101\120" +
    "\102\103\103\072\104\121\001\002\000\034\016\uff6a\020" +
    "\uff6a\047\uff6a\056\uff6a\057\uff6a\073\uff6a\076\uff6a\077\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\001\002\000" +
    "\022\043\uff7b\044\uff7b\045\uff7b\050\uff7b\052\uff7b\054\uff7b" +
    "\071\uff7b\072\uff7b\001\002\000\004\072\156\001\002\000" +
    "\034\016\024\020\027\047\073\056\071\057\110\073\075" +
    "\076\031\077\102\100\107\101\120\102\103\103\072\104" +
    "\121\001\002\000\016\043\uff7f\044\uff7f\045\uff7f\050\uff7f" +
    "\052\uff7f\054\uff7f\001\002\000\050\043\uff73\044\uff73\045" +
    "\uff73\050\uff73\052\uff73\054\uff73\056\uff73\057\uff73\060\uff73" +
    "\061\uff73\062\uff73\063\uff73\064\uff73\065\uff73\066\uff73\067" +
    "\uff73\070\uff73\071\uff73\072\uff73\001\002\000\004\050\162" +
    "\001\002\000\054\043\uff6c\044\uff6c\045\uff6c\050\uff6c\052" +
    "\uff6c\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c" +
    "\063\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071" +
    "\uff6c\072\uff6c\074\uff6c\075\uff6c\001\002\000\034\016\024" +
    "\020\027\047\073\056\071\057\110\073\075\076\031\077" +
    "\102\100\107\101\120\102\103\103\072\104\121\001\002" +
    "\000\050\043\uff72\044\uff72\045\uff72\050\uff72\052\uff72\054" +
    "\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72" +
    "\064\uff72\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072" +
    "\uff72\001\002\000\010\050\uffeb\051\224\076\uffeb\001\002" +
    "\000\010\050\uffe8\051\uffe8\076\uffe8\001\002\000\010\050" +
    "\uffe6\051\uffe6\076\uffe6\001\002\000\010\047\uffe3\050\uffe3" +
    "\076\uffe3\001\002\000\014\045\232\047\uffe4\050\uffe4\051" +
    "\224\076\uffe4\001\002\000\010\050\uffe5\051\uffe5\076\uffe5" +
    "\001\002\000\004\043\231\001\002\000\010\050\uffe9\051" +
    "\uffe9\076\uffe9\001\002\000\004\076\200\001\002\000\006" +
    "\050\uffea\076\uffea\001\002\000\010\050\uffe7\051\uffe7\076" +
    "\uffe7\001\002\000\006\040\201\043\uffce\001\002\000\040" +
    "\012\205\016\024\020\027\047\073\053\204\056\071\057" +
    "\110\073\075\076\031\077\102\100\107\101\120\102\103" +
    "\103\072\104\121\001\002\000\004\043\203\001\002\000" +
    "\046\005\uffd1\011\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\041\uffd1\042\uffd1\046\uffd1\076\uffd1\001\002" +
    "\000\042\012\205\016\024\020\027\047\073\053\204\054" +
    "\uffc0\056\071\057\110\073\075\076\031\077\102\100\107" +
    "\101\120\102\103\103\072\104\121\001\002\000\016\032" +
    "\174\033\166\034\167\035\177\036\172\076\031\001\002" +
    "\000\012\043\uffcd\044\uffcd\050\uffcd\054\uffcd\001\002\000" +
    "\006\043\uffcf\050\uffcf\001\002\000\012\043\uffcb\044\uffcb" +
    "\050\uffcb\054\uffcb\001\002\000\012\043\uffcc\044\uffcc\050" +
    "\uffcc\054\uffcc\001\002\000\004\051\224\001\002\000\004" +
    "\047\214\001\002\000\042\012\205\016\024\020\027\047" +
    "\073\050\uffc0\053\204\056\071\057\110\073\075\076\031" +
    "\077\102\100\107\101\120\102\103\103\072\104\121\001" +
    "\002\000\010\044\221\050\uffbe\054\uffbe\001\002\000\006" +
    "\050\uffc1\054\uffc1\001\002\000\004\050\220\001\002\000" +
    "\012\043\uffd2\044\uffd2\050\uffd2\054\uffd2\001\002\000\040" +
    "\012\205\016\024\020\027\047\073\053\204\056\071\057" +
    "\110\073\075\076\031\077\102\100\107\101\120\102\103" +
    "\103\072\104\121\001\002\000\006\050\uffbf\054\uffbf\001" +
    "\002\000\010\047\uffe2\050\uffe2\076\uffe2\001\002\000\004" +
    "\052\225\001\002\000\012\047\uffbc\050\uffbc\051\224\076" +
    "\uffbc\001\002\000\010\047\uffbd\050\uffbd\076\uffbd\001\002" +
    "\000\004\054\230\001\002\000\012\043\uffc2\044\uffc2\050" +
    "\uffc2\054\uffc2\001\002\000\046\005\uffd0\011\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\041\uffd0\042\uffd0" +
    "\046\uffd0\076\uffd0\001\002\000\004\076\234\001\002\000" +
    "\010\047\uffe1\050\uffe1\076\uffe1\001\002\000\064\040\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\054\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071" +
    "\uffdf\072\uffdf\074\uffdf\075\uffdf\076\uffdf\001\002\000\042" +
    "\011\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\042\uffac\046\uffac\076\uffac\001\002\000\034\016\024\020" +
    "\027\047\073\056\071\057\110\073\075\076\031\077\102" +
    "\100\107\101\120\102\103\103\072\104\121\001\002\000" +
    "\056\040\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd\052\uffdd" +
    "\054\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\074\uffdd\075\uffdd\001\002\000\004\052\241\001" +
    "\002\000\056\040\uffbb\043\uffbb\044\uffbb\045\uffbb\050\uffbb" +
    "\052\uffbb\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\074\uffbb\075\uffbb\001\002\000\042\011" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\042" +
    "\uffa9\046\uffa9\076\uffa9\001\002\000\006\043\262\050\263" +
    "\001\002\000\004\076\031\001\002\000\004\043\246\001" +
    "\002\000\034\016\024\020\027\047\073\056\071\057\110" +
    "\073\075\076\031\077\102\100\107\101\120\102\103\103" +
    "\072\104\121\001\002\000\034\016\024\020\027\047\073" +
    "\056\071\057\110\073\075\076\031\077\102\100\107\101" +
    "\120\102\103\103\072\104\121\001\002\000\004\043\251" +
    "\001\002\000\036\016\uff81\020\uff81\047\uff81\050\uff81\056" +
    "\uff81\057\uff81\073\uff81\076\uff81\077\uff81\100\uff81\101\uff81" +
    "\102\uff81\103\uff81\104\uff81\001\002\000\004\050\260\001" +
    "\002\000\046\040\201\043\uff84\050\uffce\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066" +
    "\uff84\067\uff84\070\uff84\071\uff84\072\uff84\074\uff84\075\uff84" +
    "\001\002\000\004\050\255\001\002\000\004\046\020\001" +
    "\002\000\042\011\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\021\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\042\uff8a\046\uff8a\076\uff8a\001\002\000\006" +
    "\043\uff9f\050\uff9f\001\002\000\004\046\020\001\002\000" +
    "\042\011\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\042\uff89\046\uff89\076\uff89\001\002\000\042\011\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\042\uff87" +
    "\046\uff87\076\uff87\001\002\000\004\046\020\001\002\000" +
    "\042\011\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031" +
    "\uff88\042\uff88\046\uff88\076\uff88\001\002\000\004\043\274" +
    "\001\002\000\004\027\267\001\002\000\004\047\270\001" +
    "\002\000\034\016\024\020\027\047\073\056\071\057\110" +
    "\073\075\076\031\077\102\100\107\101\120\102\103\103" +
    "\072\104\121\001\002\000\004\050\272\001\002\000\004" +
    "\043\273\001\002\000\042\011\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\042\uff8c\046\uff8c\076\uff8c\001" +
    "\002\000\042\011\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\020\uff8b\021\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\031\uff8b\042\uff8b\046\uff8b\076\uff8b\001\002\000\004" +
    "\043\303\001\002\000\034\016\024\020\027\047\073\056" +
    "\071\057\110\073\075\076\031\077\102\100\107\101\120" +
    "\102\103\103\072\104\121\001\002\000\004\050\300\001" +
    "\002\000\006\043\301\046\020\001\002\000\042\011\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\042\uff8e" +
    "\046\uff8e\076\uff8e\001\002\000\042\011\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\042\uff8f\046\uff8f\076" +
    "\uff8f\001\002\000\042\011\uff8d\014\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\042\uff8d\046\uff8d\076\uff8d\001\002" +
    "\000\010\025\uffb7\026\uffb7\046\uffb7\001\002\000\004\043" +
    "\311\001\002\000\016\032\174\033\166\034\167\035\177" +
    "\036\172\076\031\001\002\000\004\050\310\001\002\000" +
    "\004\043\uff9c\001\002\000\114\011\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\050\uffa0\052\uffa0\054\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\074\uffa0\075" +
    "\uffa0\076\uffa0\001\002\000\004\043\314\001\002\000\042" +
    "\011\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\042\uffa7\046\uffa7\076\uffa7\001\002\000\042\011\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\042\uffa6\046" +
    "\uffa6\076\uffa6\001\002\000\004\043\321\001\002\000\034" +
    "\016\024\020\027\047\073\056\071\057\110\073\075\076" +
    "\031\077\102\100\107\101\120\102\103\103\072\104\121" +
    "\001\002\000\004\050\320\001\002\000\004\043\uff9d\001" +
    "\002\000\042\011\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\042\uffaa\046\uffaa\076\uffaa\001\002\000\006" +
    "\045\232\047\325\001\002\000\004\043\324\001\002\000" +
    "\114\011\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2" +
    "\052\uffa2\054\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\074\uffa2\075\uffa2\076\uffa2\001\002\000" +
    "\042\012\205\016\024\020\027\047\073\050\uffc0\053\204" +
    "\056\071\057\110\073\075\076\031\077\102\100\107\101" +
    "\120\102\103\103\072\104\121\001\002\000\004\050\327" +
    "\001\002\000\004\043\uff9e\001\002\000\004\043\346\001" +
    "\002\000\034\016\024\020\027\047\073\056\071\057\110" +
    "\073\075\076\031\077\102\100\107\101\120\102\103\103" +
    "\072\104\121\001\002\000\004\050\333\001\002\000\004" +
    "\046\020\001\002\000\046\011\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\336\023\337\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\042\uff97\046" +
    "\uff97\076\uff97\001\002\000\042\011\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\042\uff9b\046\uff9b\076\uff9b" +
    "\001\002\000\004\046\020\001\002\000\004\047\340\001" +
    "\002\000\034\016\024\020\027\047\073\056\071\057\110" +
    "\073\075\076\031\077\102\100\107\101\120\102\103\103" +
    "\072\104\121\001\002\000\004\050\342\001\002\000\004" +
    "\046\020\001\002\000\046\011\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\336\023\337\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\042\uff97\046" +
    "\uff97\076\uff97\001\002\000\042\011\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\042\uff98\046\uff98\076\uff98" +
    "\001\002\000\042\011\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\042\uff99\046\uff99\076\uff99\001\002\000" +
    "\042\011\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\042\uff9a\046\uff9a\076\uff9a\001\002\000\004\043\372" +
    "\001\002\000\034\016\024\020\027\047\073\056\071\057" +
    "\110\073\075\076\031\077\102\100\107\101\120\102\103" +
    "\103\072\104\121\001\002\000\004\050\352\001\002\000" +
    "\004\046\353\001\002\000\010\025\356\026\355\046\uff90" +
    "\001\002\000\004\046\371\001\002\000\006\003\365\045" +
    "\366\001\002\000\036\003\357\016\024\020\027\047\073" +
    "\056\071\057\110\073\075\076\031\077\102\100\107\101" +
    "\120\102\103\103\072\104\121\001\002\000\004\043\364" +
    "\001\002\000\004\045\361\001\002\000\042\011\047\014" +
    "\026\015\056\016\024\017\025\020\027\021\023\024\021" +
    "\025\uffb8\026\uffb8\027\032\030\035\031\036\042\050\046" +
    "\uffb8\076\031\001\002\000\010\025\356\026\355\046\uff90" +
    "\001\002\000\004\046\uff94\001\002\000\004\046\uff93\001" +
    "\002\000\004\043\370\001\002\000\036\011\047\014\026" +
    "\015\056\016\024\017\025\020\027\021\023\024\021\027" +
    "\032\030\035\031\036\042\050\046\uffb8\076\031\001\002" +
    "\000\004\046\uff92\001\002\000\004\046\uff91\001\002\000" +
    "\042\011\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\042\uff96\046\uff96\076\uff96\001\002\000\042\011\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\024" +
    "\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\042\uff95" +
    "\046\uff95\076\uff95\001\002\000\006\010\ufff4\013\376\001" +
    "\002\000\004\010\u010d\001\002\000\004\010\ufff6\001\002" +
    "\000\004\076\377\001\002\000\004\046\u0101\001\002\000" +
    "\006\010\uffdc\013\uffdc\001\002\000\012\005\011\011\047" +
    "\041\u0104\046\uffd9\001\002\000\004\046\u010c\001\002\000" +
    "\012\005\uffd5\011\uffd5\041\uffd5\046\uffd5\001\002\000\004" +
    "\076\u010a\001\002\000\012\005\uffd4\011\uffd4\041\uffd4\046" +
    "\uffd4\001\002\000\012\005\011\011\047\041\u0104\046\uffd7" +
    "\001\002\000\004\046\uffda\001\002\000\012\005\uffd6\011" +
    "\uffd6\041\uffd6\046\uffd6\001\002\000\004\046\uffd8\001\002" +
    "\000\004\046\020\001\002\000\012\005\uffd3\011\uffd3\041" +
    "\uffd3\046\uffd3\001\002\000\006\010\uffdb\013\uffdb\001\002" +
    "\000\004\046\020\001\002\000\004\002\000\001\002\000" +
    "\004\002\ufff2\001\002\000\004\010\ufff3\001\002\000\004" +
    "\006\u0112\001\002\000\004\047\u0113\001\002\000\020\032" +
    "\174\033\166\034\167\035\177\036\172\050\uffc6\076\031" +
    "\001\002\000\004\050\uffc7\001\002\000\004\050\u011b\001" +
    "\002\000\004\076\u011a\001\002\000\006\044\u0118\050\uffc4" +
    "\001\002\000\016\032\174\033\166\034\167\035\177\036" +
    "\172\076\031\001\002\000\004\050\uffc5\001\002\000\006" +
    "\044\uffc3\050\uffc3\001\002\000\004\007\u011c\001\002\000" +
    "\020\032\174\033\166\034\167\035\177\036\172\037\u011d" +
    "\076\031\001\002\000\004\046\uffc8\001\002\000\004\076" +
    "\u011f\001\002\000\004\046\uffc9\001\002\000\004\040\u0121" +
    "\001\002\000\034\016\024\020\027\047\073\056\071\057" +
    "\110\073\075\076\031\077\102\100\107\101\120\102\103" +
    "\103\072\104\121\001\002\000\004\043\u0123\001\002\000" +
    "\012\004\ufffb\005\ufffb\010\ufffb\013\ufffb\001\002\000\010" +
    "\005\ufffc\010\ufffc\013\ufffc\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\012\002\003\003\007\004\004\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0123" +
    "\005\005\001\001\000\002\001\001\000\012\006\012\007" +
    "\011\034\014\035\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\373\011\374\022\372\001\001\000" +
    "\004\046\016\001\001\000\010\007\015\034\014\035\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\020" +
    "\042\021\033\031\053\047\056\050\036\051\027\052\021" +
    "\053\032\054\045\055\043\056\057\057\060\060\050\061" +
    "\044\063\052\065\041\066\051\067\054\070\037\071\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\020\042\021\033\031" +
    "\053\050\303\051\027\052\021\053\032\054\045\055\043" +
    "\056\057\057\060\060\050\061\044\063\052\065\041\066" +
    "\051\067\054\070\037\071\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\256\001" +
    "\001\000\004\046\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\174\015\164\016" +
    "\175\017\167\020\170\001\001\000\044\013\112\020\042" +
    "\021\076\054\103\056\057\060\050\072\116\073\077\075" +
    "\113\076\075\077\111\100\100\101\105\102\104\103\115" +
    "\104\114\105\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\112\020\042\021\076\054\103\056\057\060" +
    "\050\073\077\105\160\001\001\000\002\001\001\000\026" +
    "\013\112\020\042\021\076\054\103\056\057\060\050\073" +
    "\077\103\157\104\114\105\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\110\144\001\001\000\004\107\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\111\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\013\112\020\042\021" +
    "\076\054\103\056\057\060\050\073\077\102\125\103\115" +
    "\104\114\105\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\013\112\020" +
    "\042\021\076\054\103\056\057\060\050\073\077\076\132" +
    "\077\111\100\100\101\105\102\104\103\115\104\114\105" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\013\112\020\042\021\076\054\103\056\057\060\050\073" +
    "\077\103\135\104\114\105\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\013\112\020\042\021\076\054\103\056\057\060\050" +
    "\073\077\100\143\101\105\102\104\103\115\104\114\105" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\013\112\020\042\021\076\054\103\056\057\060\050\073" +
    "\077\101\147\102\104\103\115\104\114\105\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\013\112\020\042\021\076\054\103" +
    "\056\057\060\050\073\077\077\153\100\100\101\105\102" +
    "\104\103\115\104\114\105\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\013\112\020" +
    "\042\021\076\054\103\056\057\060\050\073\077\075\156" +
    "\076\075\077\111\100\100\101\105\102\104\103\115\104" +
    "\114\105\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\112\020" +
    "\042\021\076\054\103\056\057\060\050\073\077\103\163" +
    "\104\114\105\073\001\001\000\002\001\001\000\004\044" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\201\001\001\000" +
    "\052\013\112\020\042\021\076\030\210\033\206\041\205" +
    "\054\103\056\057\060\050\072\207\073\077\075\113\076" +
    "\075\077\111\100\100\101\105\102\104\103\115\104\114" +
    "\105\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\013\112\020\042\021\076\030\210\033\214\041\205" +
    "\042\226\043\215\054\103\056\057\060\050\072\207\073" +
    "\077\075\113\076\075\077\111\100\100\101\105\102\104" +
    "\103\115\104\114\105\073\001\001\000\012\015\211\016" +
    "\212\017\167\020\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\222\001\001\000\002\001\001\000\056\013\112\020\042" +
    "\021\076\030\210\033\214\041\205\042\216\043\215\054" +
    "\103\056\057\060\050\072\207\073\077\075\113\076\075" +
    "\077\111\100\100\101\105\102\104\103\115\104\114\105" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\013\112\020\042\021" +
    "\076\030\210\033\214\041\205\043\221\054\103\056\057" +
    "\060\050\072\207\073\077\075\113\076\075\077\111\100" +
    "\100\101\105\102\104\103\115\104\114\105\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\013\112\020\042\021\076\054\103\056\057\060\050\073" +
    "\077\075\237\076\075\077\111\100\100\101\105\102\104" +
    "\103\115\104\114\105\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\042\021\033\055\244\001\001\000" +
    "\002\001\001\000\046\013\112\020\042\021\076\054\103" +
    "\056\057\060\050\072\247\073\077\074\246\075\113\076" +
    "\075\077\111\100\100\101\105\102\104\103\115\104\114" +
    "\105\073\001\001\000\050\013\112\020\042\021\252\054" +
    "\103\055\253\056\057\060\050\072\247\073\077\074\251" +
    "\075\113\076\075\077\111\100\100\101\105\102\104\103" +
    "\115\104\114\105\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\256\001\001\000" +
    "\002\001\001\000\004\046\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\013\112\020\042\021\076\054\103\056\057" +
    "\060\050\072\270\073\077\075\113\076\075\077\111\100" +
    "\100\101\105\102\104\103\115\104\114\105\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\013\112\020\042" +
    "\021\076\054\103\056\057\060\050\072\276\073\077\075" +
    "\113\076\075\077\111\100\100\101\105\102\104\103\115" +
    "\104\114\105\073\001\001\000\002\001\001\000\004\046" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\306\015\164\016\175\017\167\020\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\013\112\020\042\021\076\054\103\056\057\060" +
    "\050\072\316\073\077\075\113\076\075\077\111\100\100" +
    "\101\105\102\104\103\115\104\114\105\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\013" +
    "\112\020\042\021\076\030\210\033\214\041\205\042\325" +
    "\043\215\054\103\056\057\060\050\072\207\073\077\075" +
    "\113\076\075\077\111\100\100\101\105\102\104\103\115" +
    "\104\114\105\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\013\112\020\042\021\076" +
    "\054\103\056\057\060\050\072\331\073\077\075\113\076" +
    "\075\077\111\100\100\101\105\102\104\103\115\104\114" +
    "\105\073\001\001\000\002\001\001\000\004\046\333\001" +
    "\001\000\004\062\334\001\001\000\002\001\001\000\004" +
    "\046\344\001\001\000\002\001\001\000\044\013\112\020" +
    "\042\021\076\054\103\056\057\060\050\072\340\073\077" +
    "\075\113\076\075\077\111\100\100\101\105\102\104\103" +
    "\115\104\114\105\073\001\001\000\002\001\001\000\004" +
    "\046\342\001\001\000\004\062\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\013\112\020\042\021\076\054\103\056\057\060" +
    "\050\072\350\073\077\075\113\076\075\077\111\100\100" +
    "\101\105\102\104\103\115\104\114\105\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\013\112\020" +
    "\042\021\076\054\103\056\057\060\050\072\357\073\077" +
    "\075\113\076\075\077\111\100\100\101\105\102\104\103" +
    "\115\104\114\105\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\020\042\021\033\031\053\047\361\050" +
    "\036\051\027\052\021\053\032\054\045\055\043\056\057" +
    "\057\060\060\050\061\044\063\052\065\041\066\051\067" +
    "\054\070\037\071\040\001\001\000\004\064\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\020\042\021\033\031\053\047\366\050\036\051\027" +
    "\052\021\053\032\054\045\055\043\056\057\057\060\060" +
    "\050\061\044\063\052\065\041\066\051\067\054\070\037" +
    "\071\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\u010f\022\372" +
    "\001\001\000\004\012\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\377\001\001\000\002\001\001" +
    "\000\020\024\u0101\025\u0106\026\u0105\027\u0104\031\u0107\034" +
    "\u0102\035\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\025\u0108\026" +
    "\u0105\027\u0104\031\u0107\034\u0102\035\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u010e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\u0115\015\164\016\175\017\167\020\170\036\u0114\037" +
    "\u0113\040\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\u0115\015" +
    "\164\016\175\017\167\020\170\037\u0118\040\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\u011d\015\164\016\175\017\167\020\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\013\112\020\042\021\076\054\103" +
    "\056\057\060\050\072\u0121\073\077\075\113\076\075\077" +
    "\111\100\100\101\105\102\104\103\115\104\114\105\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	StringBuilder sb = new StringBuilder();
	public void addText(String text)
	{
		sb.append(text);
		sb.append("\t\n");
	}
	public void printText()
	{
		System.out.println(sb);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conyogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conyogram ::= OMG_section yaya_section sub_yaya_section super_yaya 
            {
              Object RESULT =null;
		 System.out.println("PROGRAM PARSED.\n"); printText(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conyogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OMG_section ::= OMG_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OMG_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OMG_list ::= OMG_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OMG_list ::= OMG_dec OMG_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OMG_dec ::= OMG IDENTIFIER MAKE_KUHA sabi_sabi DB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 addText("ADDED NEW CONSTANT " + id + "."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // yaya_section ::= yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // yaya_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaya_list ::= yaya 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaya_list ::= yaya yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sub_yaya_section ::= sub_yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sub_yaya_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sub_yaya_list ::= sub_yaya 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_yaya_list ::= sub_yaya sub_yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // super_yaya ::= SUPER_YAYA utos_block 
            {
              Object RESULT =null;
		 addText("MAIN FUNCTION FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("super_yaya",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= WALEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= primitive_dt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= reference_dt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primitive_dt ::= INTY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primitive_dt ::= FLOATY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_dt ::= STRINGY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitive_dt ::= CHARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_dt ::= BOOLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reference_dt ::= valid_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reference_dt ::= array_dt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_dt ::= primitive_dt brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_dt ::= valid_name brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valid_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valid_name ::= valid_name COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valid_var ::= valid_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valid_var ::= valid_name ref_brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sub_yaya ::= MAKE_UTUSAN IDENTIFIER sy_body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 addText("CREATED NEW CLASS: " + id + "."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sy_body ::= DOLLAR_SIGN sy_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sy_opt ::= sy_cont_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sy_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sy_cont_list ::= sy_cont sy_cont_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sy_cont_list ::= sy_cont 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sy_cont ::= arte_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sy_cont ::= yaya 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sy_cont ::= constructor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constructor ::= MAKE_SIMULA IDENTIFIER utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_init",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arte_dec ::= MAKE_ARTE data_type IDENTIFIER arte_assign DB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 addText("DECLARED NEW VARIABLE: " + id + "."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arte_dec ::= MAKE_ARTE error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in VARIABLE DECLARATION"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arte_assign ::= MAKE_KUHA arte_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arte_assign ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arte_init ::= array_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arte_init ::= sy_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arte_init ::= sabi_sabi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // yaya ::= yaya_header utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 addText("CREATED NEW FUNCTION: " + id + "."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 addText("CREATED NEW FUNCTION: " + id + "."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // yaya_param_sec ::= yaya_param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // yaya_param_sec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // yaya_param_list ::= yaya_param COMMA yaya_param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // yaya_param_list ::= yaya_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // yaya_param ::= data_type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arte_init_list ::= arte_init_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arte_init_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arte_init_opt ::= arte_init COMMA arte_init_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arte_init_opt ::= arte_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // brackets ::= LEFT_BRACE RIGHT_BRACE brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // brackets ::= LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ref_brackets ::= LEFT_BRACE ss_OR RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_brackets",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // utos_block_opt ::= block_content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // utos_block_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // block_content ::= utos_dec block_content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // block_content ::= utos_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // utos_dec ::= utos_dec_db 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // utos_dec ::= utos_dec_val 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // utos_dec ::= utos_dec_nodb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // utos_dec_nodb ::= utos_likeKapag 
            {
              Object RESULT =null;
		 addText("IF STATEMENT FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // utos_dec_nodb ::= utos_makePalit 
            {
              Object RESULT =null;
		 addText("SWITCH STATEMENT FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // utos_dec_nodb ::= utos_likeHabang 
            {
              Object RESULT =null;
		 addText("WHILE LOOP FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // utos_dec_nodb ::= utos_makeGawaHabang 
            {
              Object RESULT =null;
		 addText("DO WHILE LOOP FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // utos_dec_nodb ::= utos_makeUlit 
            {
              Object RESULT =null;
		 addText("FOR LOOP FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // utos_dec_nodb ::= utos_makeArte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // utos_dec_db ::= utos_makeKuha DB 
            {
              Object RESULT =null;
		 addText("ASSIGNMENT STATEMENT FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // utos_dec_db ::= utos_makeSulat DB 
            {
              Object RESULT =null;
		 addText("OUTPUT FUNCTION FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // utos_dec_db ::= MAKE_SULAT error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in OUTPUT function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // utos_dec_db ::= utos_makeSabi DB 
            {
              Object RESULT =null;
		 addText("STANDALONE EXPRESSION FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // utos_dec_db ::= MAKE_SABI error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in MAKESABI function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // utos_dec_db ::= BREAKUP DB 
            {
              Object RESULT =null;
		 addText("BREAK FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // utos_dec_db ::= BREAKUP error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in BREAK keyword"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // utos_dec_db ::= MAKEUP DB 
            {
              Object RESULT =null;
		 addText("CONTINUE FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // utos_dec_db ::= MAKEUP error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in CONTINUE keyword"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // utos_dec_val ::= utos_makeTawag DB 
            {
              Object RESULT =null;
		 addText("FUNCTION CALL FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // utos_dec_val ::= MAKE_TAWAG error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in FUNCTION CALL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // utos_dec_val ::= utos_makeBasa DB 
            {
              Object RESULT =null;
		 addText("INPUT FUNCTION FOUND!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // utos_dec_val ::= MAKE_BASA error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in INPUT function"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // utos_makeKuha ::= valid_var arte_assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeKuha",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeTawag",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeSulat",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeBasa",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // utos_likeKapag ::= LIKE_KAPAG error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in IF statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // utos_thisNalang ::= THIS_NALANG utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // utos_thisNalang ::= THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // utos_thisNalang ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // utos_makePalit ::= MAKE_PALIT error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in SWITCH statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // makePalit_MRW ::= MRW error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in one of the cases of a SWITCH statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // makePalit_MRW ::= MDR COLON utos_block_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // makePalit_MRW ::= MDR error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in the last case of a SWITCH statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // makePalit_MRW ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // utos_likeHabang ::= LIKE_HABANG error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in WHILE LOOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // utos_makeGawaHabang ::= MAKE_GAWA error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in DO WHILE LOOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // utos_makeUlit ::= MAKE_ULIT error RIGHT_PAREN utos_block 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in FOR LOOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // utos_makeUlit ::= MAKE_ULIT error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in FOR LOOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // utos_makeArte ::= arte_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeArte",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // utos_makeSabi ::= MAKE_SABI sabi_sabi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeSabi",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sabi_sabi_end ::= valid_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sabi_sabi_end ::= utos_dec_val 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sabi_sabi_end ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sabi_sabi_for ::= sabi_sabi DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_for",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sabi_sabi ::= ss_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ss_OR ::= ss_AND OR OR ss_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_OR",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ss_OR ::= ss_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_OR",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ss_AND ::= ss_equality AND AND ss_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_AND",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ss_AND ::= ss_equality 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_AND",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ss_equality ::= ss_comparison equality ss_equality 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_equality",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ss_equality ::= ss_comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_equality",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ss_comparison ::= ss_a1 comparison ss_comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ss_comparison ::= ss_a1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ss_a1 ::= ss_a2 arithmetic_1 ss_a1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ss_a1 ::= ss_a2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a1",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ss_a2 ::= ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a2",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ss_unary_1 ::= NOT ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ss_unary_1 ::= PLUS PLUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ss_unary_1 ::= MINUS MINUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ss_unary_1 ::= ss_unary_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ss_unary_2 ::= ss_unary_2 POS_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ss_unary_2 ::= ss_unary_2 NEG_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ss_unary_2 ::= ss_paren 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ss_paren ::= LEFT_PAREN ss_paren RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ss_paren ::= sabi_sabi_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // equality ::= EQUAL_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // equality ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // comparison ::= GT_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // comparison ::= LT_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // comparison ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // comparison ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arithmetic_1 ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // arithmetic_1 ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // arithmetic_2 ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // arithmetic_2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // arithmetic_2 ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
