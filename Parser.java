
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\006\003\000\002\006\002\000" +
    "\002\007\003\000\002\007\004\000\002\010\003\000\002" +
    "\010\002\000\002\011\003\000\002\011\004\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\004" +
    "\000\002\017\004\000\002\020\003\000\002\020\005\000" +
    "\002\021\003\000\002\021\004\000\002\022\005\000\002" +
    "\023\005\000\002\024\003\000\002\024\002\000\002\025" +
    "\004\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\005\000\002\030\007\000" +
    "\002\031\007\000\002\032\004\000\002\032\004\000\002" +
    "\033\003\000\002\033\003\000\002\034\004\000\002\035" +
    "\013\000\002\035\012\000\002\036\003\000\002\036\002" +
    "\000\002\037\005\000\002\037\003\000\002\040\004\000" +
    "\002\041\005\000\002\041\004\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\004\000\002\044" +
    "\005\000\002\045\005\000\002\046\003\000\002\046\002" +
    "\000\002\047\004\000\002\047\003\000\002\050\004\000" +
    "\002\050\004\000\002\050\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\004\000\002\055\007\000\002\056\006\000\002" +
    "\057\006\000\002\060\010\000\002\061\004\000\002\061" +
    "\010\000\002\061\002\000\002\062\011\000\002\063\007" +
    "\000\002\063\005\000\002\063\002\000\002\064\007\000" +
    "\002\064\007\000\002\065\011\000\002\066\011\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\071" +
    "\005\000\002\067\003\000\002\072\006\000\002\072\003" +
    "\000\002\073\006\000\002\073\003\000\002\074\005\000" +
    "\002\074\003\000\002\075\005\000\002\075\003\000\002" +
    "\076\005\000\002\076\003\000\002\077\005\000\002\077" +
    "\003\000\002\100\004\000\002\100\005\000\002\100\005" +
    "\000\002\100\003\000\002\101\004\000\002\101\004\000" +
    "\002\101\003\000\002\102\005\000\002\102\003\000\002" +
    "\103\003\000\002\103\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\105\003" +
    "\000\002\105\003\000\002\106\003\000\002\106\003\000" +
    "\002\106\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\012\004\007\005\ufffe\010\ufffe\013\ufffe\001" +
    "\002\000\004\002\371\001\002\000\010\005\uffff\010\uffff" +
    "\013\uffff\001\002\000\012\004\007\005\ufffd\010\ufffd\013" +
    "\ufffd\001\002\000\004\075\364\001\002\000\010\005\011" +
    "\010\ufff9\013\ufff9\001\002\000\004\075\345\001\002\000" +
    "\006\010\ufffa\013\ufffa\001\002\000\006\010\ufff5\013\315" +
    "\001\002\000\004\045\020\001\002\000\010\005\011\010" +
    "\ufff8\013\ufff8\001\002\000\006\010\ufff7\013\ufff7\001\002" +
    "\000\016\005\uffcc\010\uffcc\011\uffcc\013\uffcc\041\uffcc\045" +
    "\uffcc\001\002\000\032\014\026\015\050\016\025\017\024" +
    "\020\027\021\023\024\021\027\032\030\035\031\036\045" +
    "\uffbb\075\031\001\002\000\004\046\274\001\002\000\036" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\045\uffb6" +
    "\075\uffb6\001\002\000\004\046\257\001\002\000\004\046" +
    "\254\001\002\000\004\075\031\001\002\000\004\042\uffae" +
    "\001\002\000\004\046\243\001\002\000\036\014\026\015" +
    "\050\016\025\017\024\020\027\021\023\024\021\025\uffb9" +
    "\026\uffb9\027\032\030\035\031\036\045\uffb9\075\031\001" +
    "\002\000\060\040\uffe0\042\uffe0\044\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\070\uffe0\071\uffe0\073\uffe0\074\uffe0\075\uffe0\001\002\000" +
    "\004\046\235\001\002\000\004\040\176\001\002\000\004" +
    "\042\175\001\002\000\004\045\020\001\002\000\004\046" +
    "\155\001\002\000\010\025\uffbc\026\uffbc\045\uffbc\001\002" +
    "\000\054\040\uffde\042\uffde\044\uffde\047\uffde\050\060\051" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071" +
    "\uffde\073\uffde\074\uffde\001\002\000\036\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\045\uffb3\075\uffb3\001\002" +
    "\000\004\042\uffb0\001\002\000\004\042\056\001\002\000" +
    "\036\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\045" +
    "\uffb5\075\uffb5\001\002\000\036\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\045\uffb2\075\uffb2\001\002\000\050" +
    "\042\uffab\044\uffab\047\uffab\051\uffab\055\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\067\uffab\070\uffab\071\uffab\073\uffab\074\uffab\001" +
    "\002\000\036\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\045\uffb4\075\uffb4\001\002\000\004\042\uffad\001\002" +
    "\000\036\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\045\uffb1\075\uffb1\001\002\000\004\045\055\001\002\000" +
    "\050\042\uffac\044\uffac\047\uffac\051\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\073\uffac\074\uffac" +
    "\001\002\000\004\042\uffaf\001\002\000\056\002\uffbd\005" +
    "\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\041\uffbd\045\uffbd" +
    "\075\uffbd\001\002\000\036\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\045\uffb7\075\uffb7\001\002\000\004\075" +
    "\154\001\002\000\034\016\025\020\027\046\064\055\062" +
    "\056\101\072\066\075\031\076\073\077\100\100\107\101" +
    "\074\102\063\103\110\001\002\000\052\040\uffdd\042\uffdd" +
    "\044\uffdd\047\uffdd\051\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\073\uffdd\074\uffdd\001\002\000" +
    "\004\055\152\001\002\000\050\042\uffed\044\uffed\047\uffed" +
    "\051\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\071\uffed\073\uffed\074\uffed\001\002\000\026\016\025\020" +
    "\027\046\064\075\031\076\073\077\100\100\107\101\074" +
    "\102\063\103\110\001\002\000\050\042\uff83\044\uff83\047" +
    "\uff83\051\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070" +
    "\uff83\071\uff83\073\uff83\074\uff83\001\002\000\034\016\025" +
    "\020\027\046\064\055\062\056\101\072\066\075\031\076" +
    "\073\077\100\100\107\101\074\102\063\103\110\001\002" +
    "\000\050\042\uff9a\044\uff9a\047\uff9a\051\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\073\uff9a\074" +
    "\uff9a\001\002\000\014\042\uff94\044\uff94\047\uff94\051\uff94" +
    "\071\144\001\002\000\050\042\uff81\044\uff81\047\uff81\051" +
    "\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071" +
    "\uff81\073\uff81\074\uff81\001\002\000\022\042\uff90\044\uff90" +
    "\047\uff90\051\uff90\062\140\067\142\070\uff90\071\uff90\001" +
    "\002\000\050\042\uffef\044\uffef\047\uffef\051\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\073\uffef" +
    "\074\uffef\001\002\000\050\042\ufff1\044\ufff1\047\ufff1\051" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\073\ufff1\074\ufff1\001\002\000\050\042\uff99\044\uff99" +
    "\047\uff99\051\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99" +
    "\070\uff99\071\uff99\073\uff99\074\uff99\001\002\000\036\042" +
    "\uff8c\044\uff8c\047\uff8c\051\uff8c\055\135\056\136\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\001\002\000\032\042\uff8e\044\uff8e\047\uff8e\051\uff8e" +
    "\062\uff8e\063\127\064\132\065\130\066\126\067\uff8e\070" +
    "\uff8e\071\uff8e\001\002\000\050\042\uffee\044\uffee\047\uffee" +
    "\051\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\073\uffee\074\uffee\001\002\000\004\056\124\001" +
    "\002\000\016\042\uff92\044\uff92\047\uff92\051\uff92\070\121" +
    "\071\uff92\001\002\000\050\042\uff98\044\uff98\047\uff98\051" +
    "\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\073\uff98\074\uff98\001\002\000\004\051\120\001\002" +
    "\000\050\042\uff86\044\uff86\047\uff86\051\uff86\055\uff86\056" +
    "\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\073\117\074" +
    "\116\001\002\000\044\042\uff8a\044\uff8a\047\uff8a\051\uff8a" +
    "\055\uff8a\056\uff8a\057\114\060\113\061\112\062\uff8a\063" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a" +
    "\001\002\000\050\042\ufff0\044\ufff0\047\ufff0\051\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\073" +
    "\ufff0\074\ufff0\001\002\000\050\042\uffec\044\uffec\047\uffec" +
    "\051\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec" +
    "\071\uffec\073\uffec\074\uffec\001\002\000\034\016\025\020" +
    "\027\046\064\055\062\056\101\072\066\075\031\076\073" +
    "\077\100\100\107\101\074\102\063\103\110\001\002\000" +
    "\034\016\uff76\020\uff76\046\uff76\055\uff76\056\uff76\072\uff76" +
    "\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103" +
    "\uff76\001\002\000\034\016\uff77\020\uff77\046\uff77\055\uff77" +
    "\056\uff77\072\uff77\075\uff77\076\uff77\077\uff77\100\uff77\101" +
    "\uff77\102\uff77\103\uff77\001\002\000\034\016\uff78\020\uff78" +
    "\046\uff78\055\uff78\056\uff78\072\uff78\075\uff78\076\uff78\077" +
    "\uff78\100\uff78\101\uff78\102\uff78\103\uff78\001\002\000\036" +
    "\042\uff8b\044\uff8b\047\uff8b\051\uff8b\055\uff8b\056\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\001\002\000\050\042\uff84\044\uff84\047\uff84\051" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071" +
    "\uff84\073\uff84\074\uff84\001\002\000\050\042\uff85\044\uff85" +
    "\047\uff85\051\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061" +
    "\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85" +
    "\070\uff85\071\uff85\073\uff85\074\uff85\001\002\000\052\040" +
    "\uffbe\042\uffbe\044\uffbe\047\uffbe\051\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\073\uffbe\074\uffbe" +
    "\001\002\000\004\070\122\001\002\000\034\016\025\020" +
    "\027\046\064\055\062\056\101\072\066\075\031\076\073" +
    "\077\100\100\107\101\074\102\063\103\110\001\002\000" +
    "\014\042\uff93\044\uff93\047\uff93\051\uff93\071\uff93\001\002" +
    "\000\034\016\025\020\027\046\064\055\062\056\101\072" +
    "\066\075\031\076\073\077\100\100\107\101\074\102\063" +
    "\103\110\001\002\000\044\042\uff87\044\uff87\047\uff87\051" +
    "\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87" +
    "\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071" +
    "\uff87\001\002\000\034\016\uff7e\020\uff7e\046\uff7e\055\uff7e" +
    "\056\uff7e\072\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101" +
    "\uff7e\102\uff7e\103\uff7e\001\002\000\034\016\uff7b\020\uff7b" +
    "\046\uff7b\055\uff7b\056\uff7b\072\uff7b\075\uff7b\076\uff7b\077" +
    "\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\001\002\000\034" +
    "\016\uff7c\020\uff7c\046\uff7c\055\uff7c\056\uff7c\072\uff7c\075" +
    "\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c" +
    "\001\002\000\034\016\025\020\027\046\064\055\062\056" +
    "\101\072\066\075\031\076\073\077\100\100\107\101\074" +
    "\102\063\103\110\001\002\000\034\016\uff7d\020\uff7d\046" +
    "\uff7d\055\uff7d\056\uff7d\072\uff7d\075\uff7d\076\uff7d\077\uff7d" +
    "\100\uff7d\101\uff7d\102\uff7d\103\uff7d\001\002\000\022\042" +
    "\uff8f\044\uff8f\047\uff8f\051\uff8f\062\uff8f\067\uff8f\070\uff8f" +
    "\071\uff8f\001\002\000\034\016\025\020\027\046\064\055" +
    "\062\056\101\072\066\075\031\076\073\077\100\100\107" +
    "\101\074\102\063\103\110\001\002\000\034\016\uff7a\020" +
    "\uff7a\046\uff7a\055\uff7a\056\uff7a\072\uff7a\075\uff7a\076\uff7a" +
    "\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\001\002\000" +
    "\034\016\uff79\020\uff79\046\uff79\055\uff79\056\uff79\072\uff79" +
    "\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79\102\uff79\103" +
    "\uff79\001\002\000\032\042\uff8d\044\uff8d\047\uff8d\051\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\071\uff8d\001\002\000\034\016\uff7f\020\uff7f\046\uff7f" +
    "\055\uff7f\056\uff7f\072\uff7f\075\uff7f\076\uff7f\077\uff7f\100" +
    "\uff7f\101\uff7f\102\uff7f\103\uff7f\001\002\000\034\016\025" +
    "\020\027\046\064\055\062\056\101\072\066\075\031\076" +
    "\073\077\100\100\107\101\074\102\063\103\110\001\002" +
    "\000\034\016\uff80\020\uff80\046\uff80\055\uff80\056\uff80\072" +
    "\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101\uff80\102\uff80" +
    "\103\uff80\001\002\000\016\042\uff91\044\uff91\047\uff91\051" +
    "\uff91\070\uff91\071\uff91\001\002\000\004\071\145\001\002" +
    "\000\034\016\025\020\027\046\064\055\062\056\101\072" +
    "\066\075\031\076\073\077\100\100\107\101\074\102\063" +
    "\103\110\001\002\000\012\042\uff95\044\uff95\047\uff95\051" +
    "\uff95\001\002\000\044\042\uff89\044\uff89\047\uff89\051\uff89" +
    "\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89" +
    "\001\002\000\004\047\151\001\002\000\050\042\uff82\044" +
    "\uff82\047\uff82\051\uff82\055\uff82\056\uff82\057\uff82\060\uff82" +
    "\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067" +
    "\uff82\070\uff82\071\uff82\073\uff82\074\uff82\001\002\000\034" +
    "\016\025\020\027\046\064\055\062\056\101\072\066\075" +
    "\031\076\073\077\100\100\107\101\074\102\063\103\110" +
    "\001\002\000\044\042\uff88\044\uff88\047\uff88\051\uff88\055" +
    "\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88" +
    "\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\001" +
    "\002\000\060\040\uffdf\042\uffdf\044\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\071\uffdf\073\uffdf\074\uffdf\075\uffdf\001\002\000" +
    "\004\075\031\001\002\000\004\042\157\001\002\000\034" +
    "\016\025\020\027\046\064\055\062\056\101\072\066\075" +
    "\031\076\073\077\100\100\107\101\074\102\063\103\110" +
    "\001\002\000\004\075\031\001\002\000\004\047\162\001" +
    "\002\000\004\045\020\001\002\000\036\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\045\uff9b\075\uff9b\001\002" +
    "\000\010\042\uff96\044\uff96\047\uff96\001\002\000\004\042" +
    "\166\001\002\000\004\075\uff97\001\002\000\004\027\170" +
    "\001\002\000\004\046\171\001\002\000\034\016\025\020" +
    "\027\046\064\055\062\056\101\072\066\075\031\076\073" +
    "\077\100\100\107\101\074\102\063\103\110\001\002\000" +
    "\004\047\173\001\002\000\004\042\174\001\002\000\036" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\045\uff9c" +
    "\075\uff9c\001\002\000\036\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\045\uffb8\075\uffb8\001\002\000\040\012" +
    "\201\016\025\020\027\046\064\052\200\055\062\056\101" +
    "\072\066\075\031\076\073\077\100\100\107\101\074\102" +
    "\063\103\110\001\002\000\006\042\uffaa\047\uffaa\001\002" +
    "\000\010\012\201\052\200\053\233\001\002\000\016\032" +
    "\214\033\207\034\210\035\216\036\213\075\031\001\002" +
    "\000\012\042\uffce\043\uffce\047\uffce\053\uffce\001\002\000" +
    "\006\042\uffd0\047\uffd0\001\002\000\012\042\uffcd\043\uffcd" +
    "\047\uffcd\053\uffcd\001\002\000\006\042\uffcf\047\uffcf\001" +
    "\002\000\004\050\225\001\002\000\010\047\uffe8\050\uffe8" +
    "\075\uffe8\001\002\000\010\047\uffe6\050\uffe6\075\uffe6\001" +
    "\002\000\010\046\uffe3\047\uffe3\075\uffe3\001\002\000\014" +
    "\044\057\046\uffe4\047\uffe4\050\225\075\uffe4\001\002\000" +
    "\010\047\uffe5\050\uffe5\075\uffe5\001\002\000\010\047\uffe9" +
    "\050\uffe9\075\uffe9\001\002\000\004\046\217\001\002\000" +
    "\010\047\uffe7\050\uffe7\075\uffe7\001\002\000\006\012\201" +
    "\052\200\001\002\000\004\047\224\001\002\000\010\043" +
    "\222\047\uffc1\053\uffc1\001\002\000\006\012\201\052\200" +
    "\001\002\000\006\047\uffc2\053\uffc2\001\002\000\012\042" +
    "\uffd2\043\uffd2\047\uffd2\053\uffd2\001\002\000\004\051\227" +
    "\001\002\000\010\046\uffe1\047\uffe1\075\uffe1\001\002\000" +
    "\012\046\uffbf\047\uffbf\050\225\075\uffbf\001\002\000\010" +
    "\046\uffc0\047\uffc0\075\uffc0\001\002\000\010\046\uffe2\047" +
    "\uffe2\075\uffe2\001\002\000\004\053\234\001\002\000\012" +
    "\042\uffc3\043\uffc3\047\uffc3\053\uffc3\001\002\000\012\042" +
    "\uffc4\043\uffc4\047\uffc4\053\uffc4\001\002\000\034\016\025" +
    "\020\027\046\064\055\062\056\101\072\066\075\031\076" +
    "\073\077\100\100\107\101\074\102\063\103\110\001\002" +
    "\000\004\047\237\001\002\000\006\042\240\045\020\001" +
    "\002\000\036\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\045\uff9d\075\uff9d\001\002\000\036\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\045\uff9e\075\uff9e\001\002" +
    "\000\010\025\uffba\026\uffba\045\uffba\001\002\000\016\032" +
    "\214\033\207\034\210\035\216\036\213\075\031\001\002" +
    "\000\010\047\uffeb\050\225\075\uffeb\001\002\000\004\047" +
    "\247\001\002\000\006\047\uffea\075\uffea\001\002\000\050" +
    "\042\uffa7\044\uffa7\047\uffa7\051\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\073\uffa7\074\uffa7\001" +
    "\002\000\006\044\057\046\251\001\002\000\006\012\201" +
    "\052\200\001\002\000\004\047\253\001\002\000\050\042" +
    "\uffa9\044\uffa9\047\uffa9\051\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\073\uffa9\074\uffa9\001\002" +
    "\000\034\016\025\020\027\046\064\055\062\056\101\072" +
    "\066\075\031\076\073\077\100\100\107\101\074\102\063" +
    "\103\110\001\002\000\004\047\256\001\002\000\004\042" +
    "\uffa8\001\002\000\034\016\025\020\027\046\064\055\062" +
    "\056\101\072\066\075\031\076\073\077\100\100\107\101" +
    "\074\102\063\103\110\001\002\000\004\047\261\001\002" +
    "\000\004\045\020\001\002\000\042\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\264\023\265\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\045\uffa3\075" +
    "\uffa3\001\002\000\036\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\045\uffa6\075\uffa6\001\002\000\004\045\020" +
    "\001\002\000\004\046\266\001\002\000\034\016\025\020" +
    "\027\046\064\055\062\056\101\072\066\075\031\076\073" +
    "\077\100\100\107\101\074\102\063\103\110\001\002\000" +
    "\004\047\270\001\002\000\004\045\020\001\002\000\042" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\264\023\265\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\045\uffa3\075\uffa3\001\002\000\036\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\uffa4\045\uffa4\075\uffa4\001" +
    "\002\000\036\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\045\uffa5\075\uffa5\001\002\000\034\016\025\020\027" +
    "\046\064\055\062\056\101\072\066\075\031\076\073\077" +
    "\100\100\107\101\074\102\063\103\110\001\002\000\004" +
    "\047\276\001\002\000\004\045\277\001\002\000\010\025" +
    "\302\026\301\045\uff9f\001\002\000\004\045\311\001\002" +
    "\000\004\044\307\001\002\000\034\016\025\020\027\046" +
    "\064\055\062\056\101\072\066\075\031\076\073\077\100" +
    "\100\107\101\074\102\063\103\110\001\002\000\004\044" +
    "\304\001\002\000\036\014\026\015\050\016\025\017\024" +
    "\020\027\021\023\024\021\025\uffbb\026\uffbb\027\032\030" +
    "\035\031\036\045\uffbb\075\031\001\002\000\010\025\302" +
    "\026\301\045\uff9f\001\002\000\004\045\uffa1\001\002\000" +
    "\032\014\026\015\050\016\025\017\024\020\027\021\023" +
    "\024\021\027\032\030\035\031\036\045\uffbb\075\031\001" +
    "\002\000\004\045\uffa0\001\002\000\036\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\045\uffa2\075\uffa2\001\002" +
    "\000\006\010\ufff4\013\315\001\002\000\004\010\341\001" +
    "\002\000\004\010\ufff6\001\002\000\004\075\316\001\002" +
    "\000\004\045\320\001\002\000\006\010\uffdc\013\uffdc\001" +
    "\002\000\012\005\011\011\327\041\323\045\uffd9\001\002" +
    "\000\004\045\340\001\002\000\012\005\uffd5\011\uffd5\041" +
    "\uffd5\045\uffd5\001\002\000\004\075\336\001\002\000\012" +
    "\005\uffd4\011\uffd4\041\uffd4\045\uffd4\001\002\000\012\005" +
    "\011\011\327\041\323\045\uffd7\001\002\000\004\045\uffda" +
    "\001\002\000\016\032\214\033\207\034\210\035\216\036" +
    "\213\075\031\001\002\000\012\005\uffd6\011\uffd6\041\uffd6" +
    "\045\uffd6\001\002\000\004\075\332\001\002\000\004\040" +
    "\176\001\002\000\004\042\334\001\002\000\012\005\uffd1" +
    "\011\uffd1\041\uffd1\045\uffd1\001\002\000\004\045\uffd8\001" +
    "\002\000\004\045\020\001\002\000\012\005\uffd3\011\uffd3" +
    "\041\uffd3\045\uffd3\001\002\000\006\010\uffdb\013\uffdb\001" +
    "\002\000\004\045\020\001\002\000\004\002\000\001\002" +
    "\000\004\002\ufff2\001\002\000\004\010\ufff3\001\002\000" +
    "\004\006\346\001\002\000\004\046\347\001\002\000\020" +
    "\032\214\033\207\034\210\035\216\036\213\047\uffc8\075" +
    "\031\001\002\000\004\047\uffc9\001\002\000\004\075\363" +
    "\001\002\000\004\047\356\001\002\000\006\043\354\047" +
    "\uffc6\001\002\000\016\032\214\033\207\034\210\035\216" +
    "\036\213\075\031\001\002\000\004\047\uffc7\001\002\000" +
    "\004\007\357\001\002\000\020\032\214\033\207\034\210" +
    "\035\216\036\213\037\360\075\031\001\002\000\004\045" +
    "\uffca\001\002\000\004\075\362\001\002\000\004\045\uffcb" +
    "\001\002\000\006\043\uffc5\047\uffc5\001\002\000\004\040" +
    "\365\001\002\000\034\016\025\020\027\046\064\055\062" +
    "\056\101\072\066\075\031\076\073\077\100\100\107\101" +
    "\074\102\063\103\110\001\002\000\004\042\367\001\002" +
    "\000\012\004\ufffb\005\ufffb\010\ufffb\013\ufffb\001\002\000" +
    "\010\005\ufffc\010\ufffc\013\ufffc\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\012\002\003\003\007\004\004\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\367" +
    "\005\005\001\001\000\002\001\001\000\012\006\012\007" +
    "\011\034\014\035\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\312\011\313\022\311\001\001\000" +
    "\004\045\016\001\001\000\010\007\015\034\014\035\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\020" +
    "\037\021\032\046\051\047\036\050\027\051\021\052\033" +
    "\053\042\054\041\055\052\056\053\057\045\060\043\062" +
    "\046\064\040\065\044\066\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\020\037\021\032\047\241\050\027\051\021\052" +
    "\033\053\042\054\041\055\052\056\053\057\045\060\043" +
    "\062\046\064\040\065\044\066\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\176\001\001\000\002" +
    "\001\001\000\004\045\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\013\102\020\037\021\066\053" +
    "\074\055\052\057\045\070\070\072\103\073\067\074\101" +
    "\075\071\076\076\077\075\100\105\101\104\102\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\102\020\037\021\066\053\074\055\052\057" +
    "\045\070\070\102\147\001\001\000\002\001\001\000\026" +
    "\013\102\020\037\021\066\053\074\055\052\057\045\070" +
    "\070\100\146\101\104\102\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\133\001\001\000\004\104\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\013\102\020\037\021\066\053\074\055\052\057\045\070" +
    "\070\077\114\100\105\101\104\102\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\013\102\020\037\021\066\053" +
    "\074\055\052\057\045\070\070\073\122\074\101\075\071" +
    "\076\076\077\075\100\105\101\104\102\064\001\001\000" +
    "\002\001\001\000\026\013\102\020\037\021\066\053\074" +
    "\055\052\057\045\070\070\100\124\101\104\102\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\013\102\020\037\021\066\053" +
    "\074\055\052\057\045\070\070\075\132\076\076\077\075" +
    "\100\105\101\104\102\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\013\102\020\037\021\066\053\074" +
    "\055\052\057\045\070\070\076\136\077\075\100\105\101" +
    "\104\102\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\013\102\020" +
    "\037\021\066\053\074\055\052\057\045\070\070\074\142" +
    "\075\071\076\076\077\075\100\105\101\104\102\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\013\102\020\037\021\066\053\074\055\052\057" +
    "\045\070\070\072\145\073\067\074\101\075\071\076\076" +
    "\077\075\100\105\101\104\102\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\102\020\037\021\066\053\074\055\052\057" +
    "\045\070\070\100\152\101\104\102\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\037\021\032\054" +
    "\155\001\001\000\004\071\157\001\001\000\044\013\102" +
    "\020\037\021\066\053\074\055\052\057\045\067\164\070" +
    "\070\072\163\073\067\074\101\075\071\076\076\077\075" +
    "\100\105\101\104\102\064\001\001\000\010\020\037\021" +
    "\032\054\160\001\001\000\002\001\001\000\004\045\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\013\102\020\037\021\066\053\074\055\052\057" +
    "\045\067\171\070\070\072\163\073\067\074\101\075\071" +
    "\076\076\077\075\100\105\101\104\102\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\013\102\020\037\021\066\030\203\033" +
    "\202\041\201\053\074\055\052\057\045\067\204\070\070" +
    "\072\163\073\067\074\101\075\071\076\076\077\075\100" +
    "\105\101\104\102\064\001\001\000\002\001\001\000\012" +
    "\030\203\033\220\041\201\042\231\001\001\000\012\015" +
    "\205\016\214\017\210\020\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\203\033\220\041\201\042\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\203\033\220" +
    "\041\201\042\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\013\102" +
    "\020\037\021\066\053\074\055\052\057\045\067\235\070" +
    "\070\072\163\073\067\074\101\075\071\076\076\077\075" +
    "\100\105\101\104\102\064\001\001\000\002\001\001\000" +
    "\004\045\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\244\015\243\016\245\017" +
    "\210\020\211\001\001\000\004\043\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\203\033\220\041\201\042\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\013\102\020" +
    "\037\021\066\053\074\055\052\057\045\067\254\070\070" +
    "\072\163\073\067\074\101\075\071\076\076\077\075\100" +
    "\105\101\104\102\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\013\102\020\037\021\066\053\074\055" +
    "\052\057\045\067\257\070\070\072\163\073\067\074\101" +
    "\075\071\076\076\077\075\100\105\101\104\102\064\001" +
    "\001\000\002\001\001\000\004\045\261\001\001\000\004" +
    "\061\262\001\001\000\002\001\001\000\004\045\272\001" +
    "\001\000\002\001\001\000\044\013\102\020\037\021\066" +
    "\053\074\055\052\057\045\067\266\070\070\072\163\073" +
    "\067\074\101\075\071\076\076\077\075\100\105\101\104" +
    "\102\064\001\001\000\002\001\001\000\004\045\270\001" +
    "\001\000\004\061\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\013\102\020\037\021\066\053\074\055" +
    "\052\057\045\067\274\070\070\072\163\073\067\074\101" +
    "\075\071\076\076\077\075\100\105\101\104\102\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\013" +
    "\102\020\037\021\066\053\074\055\052\057\045\067\302" +
    "\070\070\072\163\073\067\074\101\075\071\076\076\077" +
    "\075\100\105\101\104\102\064\001\001\000\002\001\001" +
    "\000\044\020\037\021\032\046\304\047\036\050\027\051" +
    "\021\052\033\053\042\054\041\055\052\056\053\057\045" +
    "\060\043\062\046\064\040\065\044\066\050\001\001\000" +
    "\004\063\305\001\001\000\002\001\001\000\044\020\037" +
    "\021\032\046\307\047\036\050\027\051\021\052\033\053" +
    "\042\054\041\055\052\056\053\057\045\060\043\062\046" +
    "\064\040\065\044\066\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\343\022\311\001\001\000\004" +
    "\012\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\316\001\001\000\002\001\001\000\020\024\320" +
    "\025\325\026\324\027\323\031\327\034\321\035\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\025\334\026\324\027\323\031" +
    "\327\034\321\035\013\001\001\000\002\001\001\000\014" +
    "\014\330\015\243\016\245\017\210\020\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\350\015\243\016\245\017\210\020\211\036" +
    "\351\037\347\040\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\350\015\243\016\245\017\210\020\211\037\354\040\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\360\015\243\016\245\017\210\020\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\013\102\020\037\021\066" +
    "\053\074\055\052\057\045\067\365\070\070\072\163\073" +
    "\067\074\101\075\071\076\076\077\075\100\105\101\104" +
    "\102\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	StringBuilder sb = new StringBuilder();
	public void addText(String text)
	{
		sb.append(text + "\n");
	}
	public void printText()
	{
		System.out.print(sb);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conyogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conyogram ::= OMG_section yaya_section sub_yaya_section super_yaya 
            {
              Object RESULT =null;
		 printText(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conyogram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OMG_section ::= OMG_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OMG_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OMG_list ::= OMG_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OMG_list ::= OMG_dec OMG_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OMG_dec ::= OMG IDENTIFIER MAKE_KUHA sabi_sabi DB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 addText("ADDED NEW CONSTANT " + id + "."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // yaya_section ::= yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // yaya_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaya_list ::= yaya 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaya_list ::= yaya yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sub_yaya_section ::= sub_yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sub_yaya_section ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sub_yaya_list ::= sub_yaya 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_yaya_list ::= sub_yaya sub_yaya_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // super_yaya ::= SUPER_YAYA utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("super_yaya",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= WALEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= primitive_dt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= reference_dt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primitive_dt ::= INTY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primitive_dt ::= FLOATY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_dt ::= STRINGY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitive_dt ::= CHARY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_dt ::= BOOLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reference_dt ::= valid_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reference_dt ::= array_dt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_dt ::= primitive_dt brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_dt ::= valid_name brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valid_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valid_name ::= valid_name COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valid_var ::= valid_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valid_var ::= valid_name ref_brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sub_yaya ::= MAKE_UTUSAN IDENTIFIER sy_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_yaya",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sy_body ::= DOLLAR_SIGN sy_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sy_opt ::= sy_cont_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sy_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sy_cont_list ::= sy_cont sy_cont_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sy_cont_list ::= sy_cont 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sy_cont ::= arte_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sy_cont ::= yaya 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sy_cont ::= constructor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constructor ::= MAKE_SIMULA IDENTIFIER utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sy_init",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arte_dec ::= MAKE_ARTE data_type IDENTIFIER arte_assign DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arte_assign ::= MAKE_KUHA arte_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arte_assign ::= MAKE_KUHA sabi_sabi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arte_init ::= array_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arte_init ::= sy_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // yaya ::= yaya_header utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // yaya_param_sec ::= yaya_param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // yaya_param_sec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // yaya_param_list ::= yaya_param COMMA yaya_param_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // yaya_param_list ::= yaya_param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // yaya_param ::= data_type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yaya_param",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // array_init ::= LEFT_CURLY RIGHT_CURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arte_init_list ::= arte_init COMMA arte_init_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arte_init_list ::= arte_init 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // brackets ::= LEFT_BRACE RIGHT_BRACE brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // brackets ::= LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ref_brackets ::= LEFT_BRACE ss_OR RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_brackets",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_block",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // utos_block_opt ::= block_content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // utos_block_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // block_content ::= utos_dec block_content 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // block_content ::= utos_dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // utos_dec ::= utos_dec_db DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // utos_dec ::= utos_dec_val DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // utos_dec ::= utos_dec_nodb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // utos_dec_nodb ::= utos_likeKapag 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // utos_dec_nodb ::= utos_makePalit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // utos_dec_nodb ::= utos_likeHabang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // utos_dec_nodb ::= utos_makeGawaHabang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // utos_dec_nodb ::= utos_makeUlit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // utos_dec_db ::= utos_makeKuha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // utos_dec_db ::= utos_makeSulat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // utos_dec_db ::= BREAKUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // utos_dec_db ::= MAKEUP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // utos_dec_val ::= utos_makeTawag 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // utos_dec_val ::= utos_makeBasa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // utos_makeKuha ::= valid_var arte_assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeKuha",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeTawag",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeSulat",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeBasa",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // utos_thisNalang ::= THIS_NALANG utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // utos_thisNalang ::= THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // utos_thisNalang ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // makePalit_MRW ::= MDR COLON utos_block_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // makePalit_MRW ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sabi_sabi_end ::= valid_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sabi_sabi_end ::= utos_dec_val 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sabi_sabi_end ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sabi_sabi_for ::= DB sabi_sabi DB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_for",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sabi_sabi ::= ss_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ss_OR ::= ss_AND OR OR ss_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_OR",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ss_OR ::= ss_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_OR",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ss_AND ::= ss_equality AND AND ss_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_AND",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ss_AND ::= ss_equality 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_AND",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ss_equality ::= ss_comparison equality ss_equality 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_equality",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ss_equality ::= ss_comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_equality",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ss_comparison ::= ss_a1 comparison ss_comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ss_comparison ::= ss_a1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ss_a1 ::= ss_a2 arithmetic_1 ss_a1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ss_a1 ::= ss_a2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a2",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ss_a2 ::= ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_a2",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ss_unary_1 ::= NOT ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ss_unary_1 ::= PLUS PLUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ss_unary_1 ::= MINUS MINUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ss_unary_1 ::= ss_unary_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ss_unary_2 ::= ss_unary_2 POS_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ss_unary_2 ::= ss_unary_2 NEG_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ss_unary_2 ::= ss_paren 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ss_paren ::= LEFT_PAREN ss_paren RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_paren",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ss_paren ::= sabi_sabi_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ss_paren",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // equality ::= EQUAL_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // equality ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comparison ::= GT_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // comparison ::= LT_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // comparison ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // comparison ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arithmetic_1 ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arithmetic_1 ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithmetic_2 ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithmetic_2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithmetic_2 ::= MODULO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
