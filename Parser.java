
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\005\005\000\002\005\004\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\002\000\002\011" +
    "\003\000\002\011\004\000\002\012\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\004\000\002\020\004\000" +
    "\002\021\003\000\002\021\005\000\002\022\003\000\002" +
    "\022\004\000\002\023\005\000\002\024\005\000\002\025" +
    "\003\000\002\025\002\000\002\026\004\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\005\000\002\031\007\000\002\032\007\000\002" +
    "\032\005\000\002\033\004\000\002\033\002\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\004" +
    "\000\002\036\013\000\002\036\012\000\002\037\003\000" +
    "\002\037\002\000\002\040\005\000\002\040\003\000\002" +
    "\041\004\000\002\042\005\000\002\043\003\000\002\043" +
    "\002\000\002\044\005\000\002\044\003\000\002\045\005" +
    "\000\002\045\004\000\002\046\005\000\002\047\005\000" +
    "\002\050\003\000\002\050\002\000\002\051\004\000\002" +
    "\051\003\000\002\052\003\000\002\052\004\000\002\052" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\054\004\000\002\054" +
    "\004\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\054\005\000\002\054\005\000\002\055\003\000" +
    "\002\055\003\000\002\055\005\000\002\055\005\000\002" +
    "\056\004\000\002\057\007\000\002\060\006\000\002\061" +
    "\006\000\002\062\010\000\002\063\004\000\002\063\010" +
    "\000\002\063\002\000\002\064\011\000\002\065\007\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\002\000\002\066\007\000\002\066\007\000\002\067" +
    "\011\000\002\070\012\000\002\070\012\000\002\071\003" +
    "\000\002\072\004\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\075\004\000\002\073\003\000\002" +
    "\076\006\000\002\076\003\000\002\077\006\000\002\077" +
    "\003\000\002\100\005\000\002\100\003\000\002\101\005" +
    "\000\002\101\003\000\002\102\005\000\002\102\003\000" +
    "\002\103\005\000\002\103\003\000\002\104\004\000\002" +
    "\104\005\000\002\104\005\000\002\104\003\000\002\105" +
    "\004\000\002\105\004\000\002\105\003\000\002\106\005" +
    "\000\002\106\003\000\002\107\003\000\002\107\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\111\003\000\002\111\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\014\003\007\004\010\005\ufffe\010\ufffe\013" +
    "\ufffe\001\002\000\004\002\u0122\001\002\000\010\005\uffff" +
    "\010\uffff\013\uffff\001\002\000\014\003\007\004\010\005" +
    "\ufffd\010\ufffd\013\ufffd\001\002\000\004\043\u0120\001\002" +
    "\000\006\003\u011a\076\u011b\001\002\000\010\005\012\010" +
    "\ufff7\013\ufff7\001\002\000\004\076\u010b\001\002\000\006" +
    "\010\ufff8\013\ufff8\001\002\000\006\010\ufff3\013\370\001" +
    "\002\000\004\046\021\001\002\000\010\005\012\010\ufff6" +
    "\013\ufff6\001\002\000\006\010\ufff5\013\ufff5\001\002\000" +
    "\016\005\uffc8\010\uffc8\011\uffc8\013\uffc8\041\uffc8\046\uffc8" +
    "\001\002\000\036\011\050\014\027\015\057\016\025\017" +
    "\026\020\030\021\024\024\022\027\033\030\036\031\037" +
    "\042\051\046\uffb6\076\032\001\002\000\006\003\341\047" +
    "\342\001\002\000\042\011\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\042\uffb1\046\uffb1\076\uffb1\001\002" +
    "\000\006\003\322\047\323\001\002\000\006\003\315\076" +
    "\032\001\002\000\006\003\307\047\310\001\002\000\004" +
    "\043\306\001\002\000\006\003\301\047\302\001\002\000" +
    "\042\011\050\014\027\015\057\016\025\017\026\020\030" +
    "\021\024\024\022\025\uffb4\026\uffb4\027\033\030\036\031" +
    "\037\042\051\046\uffb4\076\032\001\002\000\064\040\uffde" +
    "\043\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\054\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071" +
    "\uffde\072\uffde\074\uffde\075\uffde\076\uffde\001\002\000\006" +
    "\003\271\047\272\001\002\000\006\040\176\043\uffcc\001" +
    "\002\000\042\011\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\042\uffb3\046\uffb3\076\uffb3\001\002\000\006" +
    "\003\261\046\021\001\002\000\006\003\241\047\242\001" +
    "\002\000\010\025\uffb7\026\uffb7\046\uffb7\001\002\000\042" +
    "\011\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\042\uffab\046\uffab\076\uffab\001\002\000\004\043\240\001" +
    "\002\000\042\011\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\042\uffae\046\uffae\076\uffae\001\002\000\060" +
    "\040\uffdc\043\uffdc\044\uffdc\045\uffdc\050\uffdc\051\234\052" +
    "\uffdc\054\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\074\uffdc\075\uffdc\001\002\000\004\043\233" +
    "\001\002\000\042\011\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\042\uffb0\046\uffb0\076\uffb0\001\002\000" +
    "\004\043\232\001\002\000\020\003\170\032\171\033\164" +
    "\034\163\035\174\036\167\076\032\001\002\000\036\003" +
    "\106\016\025\020\030\047\070\056\067\057\105\073\072" +
    "\076\032\077\100\100\104\101\115\102\077\103\066\104" +
    "\116\001\002\000\042\011\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\042\uffad\046\uffad\076\uffad\001\002" +
    "\000\054\043\uff9d\044\uff9d\045\uff9d\050\uff9d\052\uff9d\054" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072" +
    "\uff9d\074\uff9d\075\uff9d\001\002\000\042\011\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\042\uff87\046\uff87" +
    "\076\uff87\001\002\000\042\011\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\042\uffaf\046\uffaf\076\uffaf\001" +
    "\002\000\042\011\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\042\uffac\046\uffac\076\uffac\001\002\000\004" +
    "\043\065\001\002\000\004\046\064\001\002\000\054\043" +
    "\uff9e\044\uff9e\045\uff9e\050\uff9e\052\uff9e\054\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\074\uff9e" +
    "\075\uff9e\001\002\000\004\043\063\001\002\000\042\011" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\042" +
    "\uffa4\046\uffa4\076\uffa4\001\002\000\060\002\uffb8\005\uffb8" +
    "\010\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\041\uffb8\042\uffb8\046" +
    "\uffb8\076\uffb8\001\002\000\042\011\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\042\uffa1\046\uffa1\076\uffa1" +
    "\001\002\000\054\043\uffeb\044\uffeb\045\uffeb\050\uffeb\052" +
    "\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\074\uffeb\075\uffeb\001\002\000\004\056\160" +
    "\001\002\000\026\016\025\020\030\047\070\076\032\077" +
    "\100\100\104\101\115\102\077\103\066\104\116\001\002" +
    "\000\054\043\uff6e\044\uff6e\045\uff6e\050\uff6e\052\uff6e\054" +
    "\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e" +
    "\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072" +
    "\uff6e\074\uff6e\075\uff6e\001\002\000\034\016\025\020\030" +
    "\047\070\056\067\057\105\073\072\076\032\077\100\100" +
    "\104\101\115\102\077\103\066\104\116\001\002\000\020" +
    "\043\uff7f\044\uff7f\045\uff7f\050\uff7f\052\uff7f\054\uff7f\072" +
    "\152\001\002\000\054\043\uff85\044\uff85\045\uff85\050\uff85" +
    "\052\uff85\054\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062" +
    "\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85" +
    "\071\uff85\072\uff85\074\uff85\075\uff85\001\002\000\054\043" +
    "\uff6c\044\uff6c\045\uff6c\050\uff6c\052\uff6c\054\uff6c\056\uff6c" +
    "\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\074\uff6c" +
    "\075\uff6c\001\002\000\026\043\uff7b\044\uff7b\045\uff7b\050" +
    "\uff7b\052\uff7b\054\uff7b\063\146\070\150\071\uff7b\072\uff7b" +
    "\001\002\000\054\043\uffef\044\uffef\045\uffef\050\uffef\052" +
    "\uffef\054\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\074\uffef\075\uffef\001\002\000\054\043\uffed" +
    "\044\uffed\045\uffed\050\uffed\052\uffed\054\uffed\056\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\074\uffed\075" +
    "\uffed\001\002\000\054\043\uff84\044\uff84\045\uff84\050\uff84" +
    "\052\uff84\054\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062" +
    "\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84" +
    "\071\uff84\072\uff84\074\uff84\075\uff84\001\002\000\042\043" +
    "\uff77\044\uff77\045\uff77\050\uff77\052\uff77\054\uff77\056\143" +
    "\057\144\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070" +
    "\uff77\071\uff77\072\uff77\001\002\000\036\043\uff79\044\uff79" +
    "\045\uff79\050\uff79\052\uff79\054\uff79\063\uff79\064\135\065" +
    "\140\066\136\067\134\070\uff79\071\uff79\072\uff79\001\002" +
    "\000\054\043\uffec\044\uffec\045\uffec\050\uffec\052\uffec\054" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072" +
    "\uffec\074\uffec\075\uffec\001\002\000\004\057\132\001\002" +
    "\000\004\043\131\001\002\000\022\043\uff7d\044\uff7d\045" +
    "\uff7d\050\uff7d\052\uff7d\054\uff7d\071\126\072\uff7d\001\002" +
    "\000\054\043\uff83\044\uff83\045\uff83\050\uff83\052\uff83\054" +
    "\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072" +
    "\uff83\074\uff83\075\uff83\001\002\000\014\043\uff81\044\uff81" +
    "\045\uff81\050\uff81\054\uff81\001\002\000\054\043\uff71\044" +
    "\uff71\045\uff71\050\uff71\052\uff71\054\uff71\056\uff71\057\uff71" +
    "\060\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065\uff71\066" +
    "\uff71\067\uff71\070\uff71\071\uff71\072\uff71\074\125\075\124" +
    "\001\002\000\050\043\uff75\044\uff75\045\uff75\050\uff75\052" +
    "\uff75\054\uff75\056\uff75\057\uff75\060\122\061\121\062\120" +
    "\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071" +
    "\uff75\072\uff75\001\002\000\004\043\uff86\001\002\000\054" +
    "\043\uffee\044\uffee\045\uffee\050\uffee\052\uffee\054\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\074" +
    "\uffee\075\uffee\001\002\000\054\043\uffea\044\uffea\045\uffea" +
    "\050\uffea\052\uffea\054\uffea\056\uffea\057\uffea\060\uffea\061" +
    "\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea" +
    "\070\uffea\071\uffea\072\uffea\074\uffea\075\uffea\001\002\000" +
    "\034\016\025\020\030\047\070\056\067\057\105\073\072" +
    "\076\032\077\100\100\104\101\115\102\077\103\066\104" +
    "\116\001\002\000\034\016\uff61\020\uff61\047\uff61\056\uff61" +
    "\057\uff61\073\uff61\076\uff61\077\uff61\100\uff61\101\uff61\102" +
    "\uff61\103\uff61\104\uff61\001\002\000\034\016\uff62\020\uff62" +
    "\047\uff62\056\uff62\057\uff62\073\uff62\076\uff62\077\uff62\100" +
    "\uff62\101\uff62\102\uff62\103\uff62\104\uff62\001\002\000\034" +
    "\016\uff63\020\uff63\047\uff63\056\uff63\057\uff63\073\uff63\076" +
    "\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104\uff63" +
    "\001\002\000\042\043\uff76\044\uff76\045\uff76\050\uff76\052" +
    "\uff76\054\uff76\056\uff76\057\uff76\063\uff76\064\uff76\065\uff76" +
    "\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76\001\002\000" +
    "\054\043\uff6f\044\uff6f\045\uff6f\050\uff6f\052\uff6f\054\uff6f" +
    "\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f" +
    "\074\uff6f\075\uff6f\001\002\000\054\043\uff70\044\uff70\045" +
    "\uff70\050\uff70\052\uff70\054\uff70\056\uff70\057\uff70\060\uff70" +
    "\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066\uff70\067" +
    "\uff70\070\uff70\071\uff70\072\uff70\074\uff70\075\uff70\001\002" +
    "\000\004\071\127\001\002\000\034\016\025\020\030\047" +
    "\070\056\067\057\105\073\072\076\032\077\100\100\104" +
    "\101\115\102\077\103\066\104\116\001\002\000\020\043" +
    "\uff7e\044\uff7e\045\uff7e\050\uff7e\052\uff7e\054\uff7e\072\uff7e" +
    "\001\002\000\042\011\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\042\uff9f\046\uff9f\076\uff9f\001\002\000" +
    "\034\016\025\020\030\047\070\056\067\057\105\073\072" +
    "\076\032\077\100\100\104\101\115\102\077\103\066\104" +
    "\116\001\002\000\050\043\uff72\044\uff72\045\uff72\050\uff72" +
    "\052\uff72\054\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062" +
    "\uff72\063\uff72\064\uff72\065\uff72\066\uff72\067\uff72\070\uff72" +
    "\071\uff72\072\uff72\001\002\000\034\016\uff69\020\uff69\047" +
    "\uff69\056\uff69\057\uff69\073\uff69\076\uff69\077\uff69\100\uff69" +
    "\101\uff69\102\uff69\103\uff69\104\uff69\001\002\000\034\016" +
    "\uff66\020\uff66\047\uff66\056\uff66\057\uff66\073\uff66\076\uff66" +
    "\077\uff66\100\uff66\101\uff66\102\uff66\103\uff66\104\uff66\001" +
    "\002\000\034\016\uff67\020\uff67\047\uff67\056\uff67\057\uff67" +
    "\073\uff67\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67\103" +
    "\uff67\104\uff67\001\002\000\034\016\025\020\030\047\070" +
    "\056\067\057\105\073\072\076\032\077\100\100\104\101" +
    "\115\102\077\103\066\104\116\001\002\000\034\016\uff68" +
    "\020\uff68\047\uff68\056\uff68\057\uff68\073\uff68\076\uff68\077" +
    "\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\001\002" +
    "\000\026\043\uff7a\044\uff7a\045\uff7a\050\uff7a\052\uff7a\054" +
    "\uff7a\063\uff7a\070\uff7a\071\uff7a\072\uff7a\001\002\000\034" +
    "\016\025\020\030\047\070\056\067\057\105\073\072\076" +
    "\032\077\100\100\104\101\115\102\077\103\066\104\116" +
    "\001\002\000\034\016\uff65\020\uff65\047\uff65\056\uff65\057" +
    "\uff65\073\uff65\076\uff65\077\uff65\100\uff65\101\uff65\102\uff65" +
    "\103\uff65\104\uff65\001\002\000\034\016\uff64\020\uff64\047" +
    "\uff64\056\uff64\057\uff64\073\uff64\076\uff64\077\uff64\100\uff64" +
    "\101\uff64\102\uff64\103\uff64\104\uff64\001\002\000\036\043" +
    "\uff78\044\uff78\045\uff78\050\uff78\052\uff78\054\uff78\063\uff78" +
    "\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072" +
    "\uff78\001\002\000\034\016\uff6a\020\uff6a\047\uff6a\056\uff6a" +
    "\057\uff6a\073\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102" +
    "\uff6a\103\uff6a\104\uff6a\001\002\000\034\016\025\020\030" +
    "\047\070\056\067\057\105\073\072\076\032\077\100\100" +
    "\104\101\115\102\077\103\066\104\116\001\002\000\034" +
    "\016\uff6b\020\uff6b\047\uff6b\056\uff6b\057\uff6b\073\uff6b\076" +
    "\uff6b\077\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b" +
    "\001\002\000\022\043\uff7c\044\uff7c\045\uff7c\050\uff7c\052" +
    "\uff7c\054\uff7c\071\uff7c\072\uff7c\001\002\000\004\072\153" +
    "\001\002\000\034\016\025\020\030\047\070\056\067\057" +
    "\105\073\072\076\032\077\100\100\104\101\115\102\077" +
    "\103\066\104\116\001\002\000\016\043\uff80\044\uff80\045" +
    "\uff80\050\uff80\052\uff80\054\uff80\001\002\000\050\043\uff74" +
    "\044\uff74\045\uff74\050\uff74\052\uff74\054\uff74\056\uff74\057" +
    "\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74" +
    "\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\001\002\000" +
    "\004\050\157\001\002\000\054\043\uff6d\044\uff6d\045\uff6d" +
    "\050\uff6d\052\uff6d\054\uff6d\056\uff6d\057\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d" +
    "\070\uff6d\071\uff6d\072\uff6d\074\uff6d\075\uff6d\001\002\000" +
    "\034\016\025\020\030\047\070\056\067\057\105\073\072" +
    "\076\032\077\100\100\104\101\115\102\077\103\066\104" +
    "\116\001\002\000\050\043\uff73\044\uff73\045\uff73\050\uff73" +
    "\052\uff73\054\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062" +
    "\uff73\063\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73" +
    "\071\uff73\072\uff73\001\002\000\010\050\uffe9\051\221\076" +
    "\uffe9\001\002\000\010\050\uffe4\051\uffe4\076\uffe4\001\002" +
    "\000\010\050\uffe6\051\uffe6\076\uffe6\001\002\000\010\047" +
    "\uffe1\050\uffe1\076\uffe1\001\002\000\014\045\227\047\uffe2" +
    "\050\uffe2\051\221\076\uffe2\001\002\000\010\050\uffe3\051" +
    "\uffe3\076\uffe3\001\002\000\004\043\226\001\002\000\010" +
    "\050\uffe7\051\uffe7\076\uffe7\001\002\000\004\076\175\001" +
    "\002\000\006\050\uffe8\076\uffe8\001\002\000\010\050\uffe5" +
    "\051\uffe5\076\uffe5\001\002\000\006\040\176\043\uffcc\001" +
    "\002\000\040\012\202\016\025\020\030\047\070\053\201" +
    "\056\067\057\105\073\072\076\032\077\100\100\104\101" +
    "\115\102\077\103\066\104\116\001\002\000\004\043\200" +
    "\001\002\000\046\005\uffcf\011\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\041\uffcf\042\uffcf\046\uffcf\076" +
    "\uffcf\001\002\000\042\012\202\016\025\020\030\047\070" +
    "\053\201\054\uffbe\056\067\057\105\073\072\076\032\077" +
    "\100\100\104\101\115\102\077\103\066\104\116\001\002" +
    "\000\016\032\171\033\164\034\163\035\174\036\167\076" +
    "\032\001\002\000\012\043\uffcb\044\uffcb\050\uffcb\054\uffcb" +
    "\001\002\000\006\043\uffcd\050\uffcd\001\002\000\012\043" +
    "\uffc9\044\uffc9\050\uffc9\054\uffc9\001\002\000\012\043\uffca" +
    "\044\uffca\050\uffca\054\uffca\001\002\000\004\051\221\001" +
    "\002\000\004\047\211\001\002\000\042\012\202\016\025" +
    "\020\030\047\070\050\uffbe\053\201\056\067\057\105\073" +
    "\072\076\032\077\100\100\104\101\115\102\077\103\066" +
    "\104\116\001\002\000\010\044\216\050\uffbc\054\uffbc\001" +
    "\002\000\006\050\uffbf\054\uffbf\001\002\000\004\050\215" +
    "\001\002\000\012\043\uffd0\044\uffd0\050\uffd0\054\uffd0\001" +
    "\002\000\040\012\202\016\025\020\030\047\070\053\201" +
    "\056\067\057\105\073\072\076\032\077\100\100\104\101" +
    "\115\102\077\103\066\104\116\001\002\000\006\050\uffbd" +
    "\054\uffbd\001\002\000\010\047\uffe0\050\uffe0\076\uffe0\001" +
    "\002\000\004\052\222\001\002\000\012\047\uffba\050\uffba" +
    "\051\221\076\uffba\001\002\000\010\047\uffbb\050\uffbb\076" +
    "\uffbb\001\002\000\004\054\225\001\002\000\012\043\uffc0" +
    "\044\uffc0\050\uffc0\054\uffc0\001\002\000\046\005\uffce\011" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\041" +
    "\uffce\042\uffce\046\uffce\076\uffce\001\002\000\004\076\231" +
    "\001\002\000\010\047\uffdf\050\uffdf\076\uffdf\001\002\000" +
    "\064\040\uffdd\043\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\072\uffdd\074\uffdd\075\uffdd\076\uffdd\001" +
    "\002\000\042\011\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\042\uffb2\046\uffb2\076\uffb2\001\002\000\042" +
    "\011\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\042\uffa5\046\uffa5\076\uffa5\001\002\000\034\016\025\020" +
    "\030\047\070\056\067\057\105\073\072\076\032\077\100" +
    "\100\104\101\115\102\077\103\066\104\116\001\002\000" +
    "\056\040\uffdb\043\uffdb\044\uffdb\045\uffdb\050\uffdb\052\uffdb" +
    "\054\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb" +
    "\072\uffdb\074\uffdb\075\uffdb\001\002\000\004\052\237\001" +
    "\002\000\056\040\uffb9\043\uffb9\044\uffb9\045\uffb9\050\uffb9" +
    "\052\uffb9\054\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\074\uffb9\075\uffb9\001\002\000\042\011" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\042" +
    "\uffa3\046\uffa3\076\uffa3\001\002\000\004\043\260\001\002" +
    "\000\004\076\032\001\002\000\004\043\244\001\002\000" +
    "\034\016\025\020\030\047\070\056\067\057\105\073\072" +
    "\076\032\077\100\100\104\101\115\102\077\103\066\104" +
    "\116\001\002\000\034\016\025\020\030\047\070\056\067" +
    "\057\105\073\072\076\032\077\100\100\104\101\115\102" +
    "\077\103\066\104\116\001\002\000\004\043\247\001\002" +
    "\000\036\016\uff82\020\uff82\047\uff82\050\uff82\056\uff82\057" +
    "\uff82\073\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102\uff82" +
    "\103\uff82\104\uff82\001\002\000\004\050\256\001\002\000" +
    "\046\040\176\043\uff85\050\uffcc\056\uff85\057\uff85\060\uff85" +
    "\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067" +
    "\uff85\070\uff85\071\uff85\072\uff85\074\uff85\075\uff85\001\002" +
    "\000\004\050\253\001\002\000\004\046\021\001\002\000" +
    "\042\011\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89" +
    "\021\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\042\uff89\046\uff89\076\uff89\001\002\000\006\043\uff9a" +
    "\050\uff9a\001\002\000\004\046\021\001\002\000\042\011" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\042" +
    "\uff88\046\uff88\076\uff88\001\002\000\042\011\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\042\uffa6\046\uffa6" +
    "\076\uffa6\001\002\000\004\043\270\001\002\000\004\027" +
    "\263\001\002\000\004\047\264\001\002\000\034\016\025" +
    "\020\030\047\070\056\067\057\105\073\072\076\032\077" +
    "\100\100\104\101\115\102\077\103\066\104\116\001\002" +
    "\000\004\050\266\001\002\000\004\043\267\001\002\000" +
    "\042\011\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\042\uff8a\046\uff8a\076\uff8a\001\002\000\042\011\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\042\uffa7" +
    "\046\uffa7\076\uffa7\001\002\000\004\043\277\001\002\000" +
    "\034\016\025\020\030\047\070\056\067\057\105\073\072" +
    "\076\032\077\100\100\104\101\115\102\077\103\066\104" +
    "\116\001\002\000\004\050\274\001\002\000\006\043\275" +
    "\046\021\001\002\000\042\011\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\042\uff8b\046\uff8b\076\uff8b\001" +
    "\002\000\042\011\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\020\uff8c\021\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\042\uff8c\046\uff8c\076\uff8c\001\002\000\042" +
    "\011\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\042\uffa8\046\uffa8\076\uffa8\001\002\000\010\025\uffb5\026" +
    "\uffb5\046\uffb5\001\002\000\004\043\305\001\002\000\016" +
    "\032\171\033\164\034\163\035\174\036\167\076\032\001" +
    "\002\000\004\050\304\001\002\000\054\043\uff97\044\uff97" +
    "\045\uff97\050\uff97\052\uff97\054\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97" +
    "\067\uff97\070\uff97\071\uff97\072\uff97\074\uff97\075\uff97\001" +
    "\002\000\054\043\uff9b\044\uff9b\045\uff9b\050\uff9b\052\uff9b" +
    "\054\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b" +
    "\072\uff9b\074\uff9b\075\uff9b\001\002\000\042\011\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\042\uffa2\046" +
    "\uffa2\076\uffa2\001\002\000\004\043\313\001\002\000\034" +
    "\016\025\020\030\047\070\056\067\057\105\073\072\076" +
    "\032\077\100\100\104\101\115\102\077\103\066\104\116" +
    "\001\002\000\004\050\312\001\002\000\004\043\uff98\001" +
    "\002\000\042\011\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\042\uffa0\046\uffa0\076\uffa0\001\002\000\006" +
    "\045\227\047\317\001\002\000\004\043\316\001\002\000" +
    "\054\043\uff9c\044\uff9c\045\uff9c\050\uff9c\052\uff9c\054\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c" +
    "\074\uff9c\075\uff9c\001\002\000\042\012\202\016\025\020" +
    "\030\047\070\050\uffbe\053\201\056\067\057\105\073\072" +
    "\076\032\077\100\100\104\101\115\102\077\103\066\104" +
    "\116\001\002\000\004\050\321\001\002\000\054\043\uff99" +
    "\044\uff99\045\uff99\050\uff99\052\uff99\054\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99" +
    "\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\074\uff99\075" +
    "\uff99\001\002\000\004\043\340\001\002\000\034\016\025" +
    "\020\030\047\070\056\067\057\105\073\072\076\032\077" +
    "\100\100\104\101\115\102\077\103\066\104\116\001\002" +
    "\000\004\050\325\001\002\000\004\046\021\001\002\000" +
    "\046\011\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\330\023\331\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\042\uff93\046\uff93\076\uff93\001\002" +
    "\000\042\011\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\042\uff96\046\uff96\076\uff96\001\002\000\004\046" +
    "\021\001\002\000\004\047\332\001\002\000\034\016\025" +
    "\020\030\047\070\056\067\057\105\073\072\076\032\077" +
    "\100\100\104\101\115\102\077\103\066\104\116\001\002" +
    "\000\004\050\334\001\002\000\004\046\021\001\002\000" +
    "\046\011\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\022\330\023\331\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\042\uff93\046\uff93\076\uff93\001\002" +
    "\000\042\011\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\042\uff94\046\uff94\076\uff94\001\002\000\042\011" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\042" +
    "\uff95\046\uff95\076\uff95\001\002\000\042\011\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\042\uffaa\046\uffaa" +
    "\076\uffaa\001\002\000\004\043\364\001\002\000\034\016" +
    "\025\020\030\047\070\056\067\057\105\073\072\076\032" +
    "\077\100\100\104\101\115\102\077\103\066\104\116\001" +
    "\002\000\004\050\344\001\002\000\004\046\345\001\002" +
    "\000\010\025\350\026\347\046\uff8d\001\002\000\004\046" +
    "\363\001\002\000\006\003\357\045\360\001\002\000\036" +
    "\003\351\016\025\020\030\047\070\056\067\057\105\073" +
    "\072\076\032\077\100\100\104\101\115\102\077\103\066" +
    "\104\116\001\002\000\004\043\356\001\002\000\004\045" +
    "\353\001\002\000\042\011\050\014\027\015\057\016\025" +
    "\017\026\020\030\021\024\024\022\025\uffb6\026\uffb6\027" +
    "\033\030\036\031\037\042\051\046\uffb6\076\032\001\002" +
    "\000\010\025\350\026\347\046\uff8d\001\002\000\004\046" +
    "\uff91\001\002\000\004\046\uff90\001\002\000\004\043\362" +
    "\001\002\000\036\011\050\014\027\015\057\016\025\017" +
    "\026\020\030\021\024\024\022\027\033\030\036\031\037" +
    "\042\051\046\uffb6\076\032\001\002\000\004\046\uff8f\001" +
    "\002\000\004\046\uff8e\001\002\000\042\011\uff92\014\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\024\uff92\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\031\uff92\042\uff92\046\uff92" +
    "\076\uff92\001\002\000\042\011\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\042\uffa9\046\uffa9\076\uffa9\001" +
    "\002\000\006\010\ufff2\013\370\001\002\000\004\010\u0107" +
    "\001\002\000\004\010\ufff4\001\002\000\004\076\371\001" +
    "\002\000\004\046\373\001\002\000\006\010\uffda\013\uffda" +
    "\001\002\000\012\005\012\011\050\041\376\046\uffd7\001" +
    "\002\000\004\046\u0106\001\002\000\012\005\uffd3\011\uffd3" +
    "\041\uffd3\046\uffd3\001\002\000\004\076\u0104\001\002\000" +
    "\012\005\uffd2\011\uffd2\041\uffd2\046\uffd2\001\002\000\012" +
    "\005\012\011\050\041\376\046\uffd5\001\002\000\004\046" +
    "\uffd8\001\002\000\012\005\uffd4\011\uffd4\041\uffd4\046\uffd4" +
    "\001\002\000\004\046\uffd6\001\002\000\004\046\021\001" +
    "\002\000\012\005\uffd1\011\uffd1\041\uffd1\046\uffd1\001\002" +
    "\000\006\010\uffd9\013\uffd9\001\002\000\004\046\021\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufff0\001\002" +
    "\000\004\010\ufff1\001\002\000\004\006\u010c\001\002\000" +
    "\004\047\u010d\001\002\000\020\032\171\033\164\034\163" +
    "\035\174\036\167\050\uffc4\076\032\001\002\000\004\050" +
    "\uffc5\001\002\000\004\076\u0119\001\002\000\004\050\u0114" +
    "\001\002\000\006\044\u0112\050\uffc2\001\002\000\016\032" +
    "\171\033\164\034\163\035\174\036\167\076\032\001\002" +
    "\000\004\050\uffc3\001\002\000\004\007\u0115\001\002\000" +
    "\020\032\171\033\164\034\163\035\174\036\167\037\u0116" +
    "\076\032\001\002\000\004\046\uffc6\001\002\000\004\076" +
    "\u0118\001\002\000\004\046\uffc7\001\002\000\006\044\uffc1" +
    "\050\uffc1\001\002\000\004\043\u011f\001\002\000\004\040" +
    "\u011c\001\002\000\034\016\025\020\030\047\070\056\067" +
    "\057\105\073\072\076\032\077\100\100\104\101\115\102" +
    "\077\103\066\104\116\001\002\000\004\043\u011e\001\002" +
    "\000\014\003\ufffb\004\ufffb\005\ufffb\010\ufffb\013\ufffb\001" +
    "\002\000\014\003\ufffa\004\ufffa\005\ufffa\010\ufffa\013\ufffa" +
    "\001\002\000\014\003\ufff9\004\ufff9\005\ufff9\010\ufff9\013" +
    "\ufff9\001\002\000\010\005\ufffc\010\ufffc\013\ufffc\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\012\002\003\003\010\004\004\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0120" +
    "\005\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\013\007\012\035\015\036\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\365\011\366\023" +
    "\364\001\001\000\004\047\017\001\001\000\010\007\016" +
    "\035\015\036\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\021\043\022\033\032\053\050\057\051\037" +
    "\052\030\053\022\054\034\055\046\056\044\057\060\060" +
    "\061\061\052\062\045\064\054\066\042\067\051\070\055" +
    "\071\040\072\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\021" +
    "\043\022\033\032\053\051\277\052\030\053\022\054\034" +
    "\055\046\056\044\057\060\060\061\061\052\062\045\064" +
    "\054\066\042\067\051\070\055\071\040\072\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\254\001" +
    "\001\000\002\001\001\000\004\047\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\015" +
    "\171\016\161\017\172\020\164\021\165\001\001\000\044" +
    "\014\107\021\043\022\073\055\100\057\060\061\052\073" +
    "\113\074\074\076\110\077\072\100\106\101\075\102\102" +
    "\103\101\104\112\105\111\106\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\107\021\043\022\073\055\100\057\060" +
    "\061\052\074\074\106\155\001\001\000\002\001\001\000" +
    "\026\014\107\021\043\022\073\055\100\057\060\061\052" +
    "\074\074\104\154\105\111\106\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\111\141\001\001\000\004\110\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\112\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\014\107\021\043" +
    "\022\073\055\100\057\060\061\052\074\074\103\122\104" +
    "\112\105\111\106\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\014\107" +
    "\021\043\022\073\055\100\057\060\061\052\074\074\077" +
    "\127\100\106\101\075\102\102\103\101\104\112\105\111" +
    "\106\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\107\021\043\022\073\055\100\057\060\061\052" +
    "\074\074\104\132\105\111\106\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\014\107\021\043\022\073\055\100\057\060\061" +
    "\052\074\074\101\140\102\102\103\101\104\112\105\111" +
    "\106\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\014\107\021\043\022\073\055\100\057\060\061\052" +
    "\074\074\102\144\103\101\104\112\105\111\106\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\014\107\021\043\022\073\055" +
    "\100\057\060\061\052\074\074\100\150\101\075\102\102" +
    "\103\101\104\112\105\111\106\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\014\107" +
    "\021\043\022\073\055\100\057\060\061\052\074\074\076" +
    "\153\077\072\100\106\101\075\102\102\103\101\104\112" +
    "\105\111\106\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\107" +
    "\021\043\022\073\055\100\057\060\061\052\074\074\104" +
    "\160\105\111\106\070\001\001\000\002\001\001\000\004" +
    "\045\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\176\001\001" +
    "\000\052\014\107\021\043\022\073\031\205\034\203\042" +
    "\202\055\100\057\060\061\052\073\204\074\074\076\110" +
    "\077\072\100\106\101\075\102\102\103\101\104\112\105" +
    "\111\106\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\014\107\021\043\022\073\031\205\034\211\042" +
    "\202\043\223\044\212\055\100\057\060\061\052\073\204" +
    "\074\074\076\110\077\072\100\106\101\075\102\102\103" +
    "\101\104\112\105\111\106\070\001\001\000\012\016\206" +
    "\017\207\020\164\021\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\217\001\001\000\002\001\001\000\056\014\107\021" +
    "\043\022\073\031\205\034\211\042\202\043\213\044\212" +
    "\055\100\057\060\061\052\073\204\074\074\076\110\077" +
    "\072\100\106\101\075\102\102\103\101\104\112\105\111" +
    "\106\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\014\107\021\043" +
    "\022\073\031\205\034\211\042\202\044\216\055\100\057" +
    "\060\061\052\073\204\074\074\076\110\077\072\100\106" +
    "\101\075\102\102\103\101\104\112\105\111\106\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\107\021\043\022\073\055\100" +
    "\057\060\061\052\074\074\076\235\077\072\100\106\101" +
    "\075\102\102\103\101\104\112\105\111\106\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\043\022\033" +
    "\056\242\001\001\000\002\001\001\000\046\014\107\021" +
    "\043\022\073\055\100\057\060\061\052\073\245\074\074" +
    "\075\244\076\110\077\072\100\106\101\075\102\102\103" +
    "\101\104\112\105\111\106\070\001\001\000\050\014\107" +
    "\021\043\022\250\055\100\056\251\057\060\061\052\073" +
    "\245\074\074\075\247\076\110\077\072\100\106\101\075" +
    "\102\102\103\101\104\112\105\111\106\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\254\001\001\000\002\001\001\000\004\047\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\014\107" +
    "\021\043\022\073\055\100\057\060\061\052\073\264\074" +
    "\074\076\110\077\072\100\106\101\075\102\102\103\101" +
    "\104\112\105\111\106\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\014\107\021\043\022\073\055\100\057" +
    "\060\061\052\073\272\074\074\076\110\077\072\100\106" +
    "\101\075\102\102\103\101\104\112\105\111\106\070\001" +
    "\001\000\002\001\001\000\004\047\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\302\016\161\017\172" +
    "\020\164\021\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\014\107\021\043\022\073\055\100\057\060\061" +
    "\052\073\310\074\074\076\110\077\072\100\106\101\075" +
    "\102\102\103\101\104\112\105\111\106\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\014" +
    "\107\021\043\022\073\031\205\034\211\042\202\043\317" +
    "\044\212\055\100\057\060\061\052\073\204\074\074\076" +
    "\110\077\072\100\106\101\075\102\102\103\101\104\112" +
    "\105\111\106\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\014\107\021\043\022\073" +
    "\055\100\057\060\061\052\073\323\074\074\076\110\077" +
    "\072\100\106\101\075\102\102\103\101\104\112\105\111" +
    "\106\070\001\001\000\002\001\001\000\004\047\325\001" +
    "\001\000\004\063\326\001\001\000\002\001\001\000\004" +
    "\047\336\001\001\000\002\001\001\000\044\014\107\021" +
    "\043\022\073\055\100\057\060\061\052\073\332\074\074" +
    "\076\110\077\072\100\106\101\075\102\102\103\101\104" +
    "\112\105\111\106\070\001\001\000\002\001\001\000\004" +
    "\047\334\001\001\000\004\063\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\014\107\021\043\022\073\055\100\057\060\061" +
    "\052\073\342\074\074\076\110\077\072\100\106\101\075" +
    "\102\102\103\101\104\112\105\111\106\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\014\107\021" +
    "\043\022\073\055\100\057\060\061\052\073\351\074\074" +
    "\076\110\077\072\100\106\101\075\102\102\103\101\104" +
    "\112\105\111\106\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\021\043\022\033\032\053\050\353\051" +
    "\037\052\030\053\022\054\034\055\046\056\044\057\060" +
    "\060\061\061\052\062\045\064\054\066\042\067\051\070" +
    "\055\071\040\072\041\001\001\000\004\065\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\021\043\022\033\032\053\050\360\051\037\052\030" +
    "\053\022\054\034\055\046\056\044\057\060\060\061\061" +
    "\052\062\045\064\054\066\042\067\051\070\055\071\040" +
    "\072\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\u0109\023\364" +
    "\001\001\000\004\012\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\371\001\001\000\002\001\001" +
    "\000\020\025\373\026\u0100\027\377\030\376\032\u0101\035" +
    "\374\036\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\026\u0102\027" +
    "\377\030\376\032\u0101\035\374\036\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\u010e\016\161\017\172\020\164\021\165\037\u010f\040" +
    "\u010d\041\u0110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\u010e\016" +
    "\161\017\172\020\164\021\165\040\u0112\041\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\u0116\016" +
    "\161\017\172\020\164\021\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\014\107\021\043" +
    "\022\073\055\100\057\060\061\052\073\u011c\074\074\076" +
    "\110\077\072\100\106\101\075\102\102\103\101\104\112" +
    "\105\111\106\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	StringBuilder sb = new StringBuilder();
	public void addText(String text)
	{
		sb.append(text);
		sb.append("\t\n");
	}
	public void printText()
	{
		System.out.println(sb);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conyogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conyogram ::= OMG_section yaya_section sub_yaya_section super_yaya 
            {
              Object RESULT =null;
		 System.out.println("PROGRAM PARSED.\n"); printText(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conyogram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OMG_section ::= OMG_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OMG_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OMG_list ::= OMG_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OMG_list ::= OMG_dec OMG_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OMG_dec ::= OMG IDENTIFIER MAKE_KUHA sabi_sabi DB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 addText("ADDED NEW CONSTANT " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OMG_dec ::= OMG error DB 
            {
              Object RESULT =null;
		 addText("Error in Constant Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OMG_dec ::= error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found before main and function declarations"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaya_section ::= yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaya_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // yaya_list ::= yaya 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // yaya_list ::= yaya yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sub_yaya_section ::= sub_yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_yaya_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sub_yaya_list ::= sub_yaya 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sub_yaya_list ::= sub_yaya sub_yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // super_yaya ::= SUPER_YAYA utos_block 
            {
              Object RESULT =null;
		 addText("MAIN FUNCTION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("super_yaya",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= WALEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= primitive_dt 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= reference_dt 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_dt ::= INTY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitive_dt ::= FLOATY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_dt ::= STRINGY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitive_dt ::= CHARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primitive_dt ::= BOOLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reference_dt ::= valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reference_dt ::= array_dt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_dt ::= primitive_dt brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_dt ::= valid_name brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valid_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valid_name ::= valid_name COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valid_var ::= valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valid_var ::= valid_name ref_brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sub_yaya ::= MAKE_UTUSAN IDENTIFIER sy_body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 addText("CREATED NEW CLASS: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sy_body ::= DOLLAR_SIGN sy_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_body",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sy_opt ::= sy_cont_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sy_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sy_cont_list ::= sy_cont sy_cont_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sy_cont_list ::= sy_cont 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sy_cont ::= arte_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sy_cont ::= yaya 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sy_cont ::= constructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constructor ::= MAKE_SIMULA IDENTIFIER utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_init",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arte_dec ::= MAKE_ARTE data_type IDENTIFIER arte_assign DB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 addText("DECLARED NEW VARIABLE: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arte_dec ::= MAKE_ARTE error DB 
            {
              Object RESULT =null;
		 addText("Error in Variable Declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arte_assign ::= MAKE_KUHA arte_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arte_assign ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arte_init ::= array_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arte_init ::= sy_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arte_init ::= sabi_sabi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // yaya ::= yaya_header utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 addText("CREATED NEW FUNCTION: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 addText("CREATED NEW FUNCTION: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // yaya_param_sec ::= yaya_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // yaya_param_sec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // yaya_param_list ::= yaya_param COMMA yaya_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // yaya_param_list ::= yaya_param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // yaya_param ::= data_type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_init",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arte_init_list ::= arte_init_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arte_init_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arte_init_opt ::= arte_init COMMA arte_init_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arte_init_opt ::= arte_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // brackets ::= LEFT_BRACE RIGHT_BRACE brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // brackets ::= LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ref_brackets ::= LEFT_BRACE ss_OR RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_brackets",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // utos_block_opt ::= block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // utos_block_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // block_content ::= utos_dec block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // block_content ::= utos_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // utos_dec ::= utos_dec_db 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // utos_dec ::= utos_dec_val DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // utos_dec ::= utos_dec_nodb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // utos_dec_nodb ::= utos_likeKapag 
            {
              Object RESULT =null;
		 addText("IF STATEMENT FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // utos_dec_nodb ::= utos_makePalit 
            {
              Object RESULT =null;
		 addText("SWITCH STATEMENT FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // utos_dec_nodb ::= utos_likeHabang 
            {
              Object RESULT =null;
		 addText("WHILE LOOP FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // utos_dec_nodb ::= utos_makeGawaHabang 
            {
              Object RESULT =null;
		 addText("DO WHILE LOOP FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // utos_dec_nodb ::= utos_makeUlit 
            {
              Object RESULT =null;
		 addText("FOR LOOP FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // utos_dec_nodb ::= utos_makeArte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // utos_dec_nodb ::= LIKE_KAPAG error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in IF statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // utos_dec_nodb ::= MAKE_PALIT error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // utos_dec_nodb ::= LIKE_HABANG error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // utos_dec_nodb ::= MAKE_GAWA error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in DO WHILE LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // utos_dec_nodb ::= MAKE_ULIT error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in FOR LOOP"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // utos_dec_db ::= utos_makeKuha DB 
            {
              Object RESULT =null;
		 addText("ASSIGNMENT STATEMENT FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // utos_dec_db ::= utos_makeSulat DB 
            {
              Object RESULT =null;
		 addText("OUTPUT FUNCTION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // utos_dec_db ::= utos_makeSabi DB 
            {
              Object RESULT =null;
		 addText("STANDALONE EXPRESSION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // utos_dec_db ::= BREAKUP DB 
            {
              Object RESULT =null;
		 addText("BREAK FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // utos_dec_db ::= MAKEUP DB 
            {
              Object RESULT =null;
		 addText("CONTINUE FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // utos_dec_db ::= MAKE_SULAT error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in OUTPUT function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // utos_dec_db ::= MAKE_SABI error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in MAKESABI function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // utos_dec_val ::= utos_makeTawag 
            {
              Object RESULT =null;
		 addText("FUNCTION CALL FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // utos_dec_val ::= utos_makeBasa 
            {
              Object RESULT =null;
		 addText("INPUT FUNCTION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // utos_dec_val ::= MAKE_TAWAG error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in FUNCTION CALL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // utos_dec_val ::= MAKE_BASA error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in SCAN function"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // utos_makeKuha ::= valid_var arte_assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeKuha",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeTawag",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSulat",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeBasa",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // utos_thisNalang ::= THIS_NALANG utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // utos_thisNalang ::= THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // utos_thisNalang ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // makePalit_MRW ::= MRW error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in one of the cases of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // makePalit_MRW ::= MDR COLON utos_block_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // makePalit_MRW ::= MDR error DB 
            {
              Object RESULT =null;
		 addText("Erroneous statement found in the last case of a SWITCH statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // makePalit_MRW ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // utos_makeArte ::= arte_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeArte",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // utos_makeSabi ::= MAKE_SABI sabi_sabi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSabi",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sabi_sabi_end ::= valid_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sabi_sabi_end ::= utos_dec_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sabi_sabi_end ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sabi_sabi_for ::= sabi_sabi DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_for",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sabi_sabi ::= ss_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ss_OR ::= ss_AND OR OR ss_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ss_OR ::= ss_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ss_AND ::= ss_equality AND AND ss_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ss_AND ::= ss_equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ss_equality ::= ss_comparison equality ss_equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ss_equality ::= ss_comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ss_comparison ::= ss_a1 comparison ss_comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ss_comparison ::= ss_a1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ss_a1 ::= ss_a2 arithmetic_1 ss_a1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ss_a1 ::= ss_a2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ss_a2 ::= ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ss_unary_1 ::= NOT ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ss_unary_1 ::= PLUS PLUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ss_unary_1 ::= MINUS MINUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ss_unary_1 ::= ss_unary_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ss_unary_2 ::= ss_unary_2 POS_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ss_unary_2 ::= ss_unary_2 NEG_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ss_unary_2 ::= ss_paren 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ss_paren ::= LEFT_PAREN ss_paren RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ss_paren ::= sabi_sabi_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // equality ::= EQUAL_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // equality ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // comparison ::= GT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // comparison ::= LT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // comparison ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // comparison ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arithmetic_1 ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arithmetic_1 ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // arithmetic_2 ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // arithmetic_2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // arithmetic_2 ::= MODULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
